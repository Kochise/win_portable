import { Edge, Graph } from "../graph";
import { DaGraph, GraphNode } from '../types';
declare type SimplexNode = GraphNode & {
    low: number;
    lim: number;
    parent: string;
    cutvalue: number;
};
declare type SimplexEdge = {
    cutvalue: number;
};
export declare type SimplexTree = Graph<unknown, Partial<SimplexNode>, Partial<SimplexEdge>>;
export declare function networkSimplex(g: DaGraph): void;
export declare namespace networkSimplex {
    var initLowLimValues: (tree: SimplexTree, root?: string) => void;
    var initCutValues: (t: SimplexTree, g: DaGraph) => void;
    var calcCutValue: (t: SimplexTree, g: DaGraph, child: string) => number;
    var leaveEdge: (tree: SimplexTree) => Edge;
    var enterEdge: (t: SimplexTree, g: DaGraph, edge: Edge) => Edge;
    var exchangeEdges: (t: SimplexTree, g: DaGraph, e: Edge, f: Edge) => void;
}
export {};
