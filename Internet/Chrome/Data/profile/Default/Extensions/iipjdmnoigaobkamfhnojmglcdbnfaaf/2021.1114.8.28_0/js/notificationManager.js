const NotificationManager=function(){let isSupporter=!1;const ls=localSt;function create(notificationObject){return _.cloneDeep(Object.assign({},NotificationConstants.BaseNotification,notificationObject))}async function showMultipleNotifications(notifications,callback){if(!notifications||0==notifications.length)return callback&&callback();await showNotification(notifications.shift()),await showMultipleNotifications(notifications,callback)}async function showNotification(notif){let notificationStyle;if(notif.force)notificationStyle=notif.style;else switch(notif.type){case NotificationConstants.Notifications.DUPLICATE_CLOSED.type:case NotificationConstants.Notifications.DOMAIN_DUPLICATES_CLOSED.type:notificationStyle=Settings.notifyBackgroudDuplicatesClosed;break;case NotificationConstants.Notifications.DUPLICATES_FOUND.type:notificationStyle=Settings.notifyPreviousDuplicates;break;case NotificationConstants.Notifications.TABS_RESTORED.type:case NotificationConstants.Notifications.ADDED_TO_DOMAIN_BLOCK_LIST.type:case NotificationConstants.Notifications.URL_ALLOW_LISTED.type:case NotificationConstants.Notifications.URL_BLOCK_LISTED.type:case NotificationConstants.Notifications.PREVIOUS_DUPLICATES_REMOVED.type:notificationStyle=Settings.notifyOthers;break;case NotificationConstants.Notifications.WEEKLY_STATS.type:notificationStyle=Settings.notifyWeeklyStats;break;default:notificationStyle=notif.style||NotificationStyle.NATIVE}if(notificationStyle===NotificationStyle.OFF)return console.debug("This notification has been turned off in settings",notif.type);if(notif.iconUrl=notif.iconUrl||Icon.NOTIFICATION,notificationStyle==NotificationStyle.NATIVE){notif.buttons=notif.buttons.map((b=>(b.isDisabled&&(b.title+=" (Supporter only)"),delete b.isDisabled,b)));const options={title:notif.title||"",message:notif.message,contextMessage:notif.contextMessage||"",iconUrl:notif.iconUrl,isClickable:!!notif.isClickable,requireInteraction:!!notif.requireInteraction,type:"basic",buttons:notif.buttons};return notif.buttons.length<2&&options.buttons.push({title:"Support ClutterFree",iconUrl:Icon.SUPPORT}),void await new Promise((resolve=>{chrome.notifications.create(notif.id||"",options,resolve)}))}notif.requireInteraction=!!notif.requireInteraction,notif.showSupportCFButton=notif.buttons.length<2?!isSupporter:!isSupporter&&Math.random()>.49;const checksumObj={title:notif.title,message:notif.message,contextMessage:notif.contextMessage,buttons:notif.buttons,tabId:notif.tabId,type:notif.type,data:notif.data,showSupportCFButton:notif.showSupportCFButton};notif.checksum=Utils.simpleChecksum(Utils.serialize(checksumObj)),notif.ts=Date.now(),notif.id=`${notif.id}_${notif.checksum}`;const st=await ls.get({notifications:DefaultSettings.NOTIFICATIONS_LIST});if(notif.allowDuplicates)st.notifications.push(notif);else{const prevIndex=st.notifications.findIndex((n=>n.type==notif.type));prevIndex>-1?st.notifications[prevIndex]=notif:st.notifications.push(notif)}switch(await ls.set(st),notif.tabId){case NotificationConstants.TabsToNotify.ACTIVE:chrome.tabs.query({active:!0,lastFocusedWindow:!0,windowType:"normal"},(tabs=>!chrome.runtime.lastError&&tabs&&tabs[0]&&chrome.tabs.sendMessage(tabs[0].id,{type:MessageType.NOTIFY_ACTIVE})));break;case NotificationConstants.TabsToNotify.ALL:break;default:chrome.tabs.sendMessage(notif.tabId,{type:MessageType.NOTIFY_TAB,value:notif.tabId})}}return{onNotificationClick:function(notificationId){switch(notificationId){case NotificationConstants.Notifications.EXTENSION_UPDATED.type:chrome.tabs.create({url:Urls.UPDATE_NOTES});break;case NotificationConstants.Notifications.WEEKLY_STATS.type:chrome.tabs.create({url:Urls.STATS});break;case NotificationConstants.Notifications.ACS_PROMPT.type:chrome.tabs.create({url:Urls.ACS_CWS});break;case NotificationConstants.Notifications.DUPLICATES_FOUND.type:openPopup(Urls.POPUP.DUPLICATES);break;case NotificationConstants.Notifications.URL_BLOCK_LISTED.type:case NotificationConstants.Notifications.URL_ALLOW_LISTED.type:chrome.tabs.create({url:Urls.OPTIONS+OptionsSectionReference.LIST_CONTROL_MODE});break;case NotificationConstants.Notifications.ADDED_TO_DOMAIN_BLOCK_LIST.type:chrome.tabs.create({url:Urls.OPTIONS+OptionsSectionReference.DOMAIN_BLOCK_LIST});break;case NotificationConstants.Notifications.TAB_LIMIT_EXCEEDED.type:return;default:return void console.warn("Unidentified notification",notificationId)}chrome.notifications.clear(notificationId)},onButtonClick:async function(notificationId,buttonIndex,notificationType){const notification=(await ls.get({notifications:DefaultSettings.NOTIFICATIONS_LIST})).notifications.find((n=>n.id==notificationId)),clearThisNotification=()=>{const notificationObjectKey=Object.keys(NotificationConstants.Notifications).find((n=>NotificationConstants.Notifications[n].type==notificationType));notificationObjectKey&&NotificationConstants.Notifications[notificationObjectKey].style===NotificationStyle.IN_PAGE?async function(notificationId){const st=await ls.get({notifications:DefaultSettings.NOTIFICATIONS_LIST});st.notifications=st.notifications.filter((n=>n.id!=notificationId)),ls.set(st)}(notificationId):chrome.notifications.clear(notificationId)};if(9!=buttonIndex)switch(null!=notificationType?notificationType:notificationId){case NotificationConstants.Notifications.DUPLICATE_CLOSED.type:switch(buttonIndex){case 0:if(!notification.data||!notification.data.originalTabId){clearThisNotification();break}chrome.tabs.update(notification.data.originalTabId,{active:!0},clearThisNotification);break;case 1:chrome.tabs.create({url:Utils.addDedupToURL(notification.data.duplicate.url),active:notification.data.duplicate.active,windowId:notification.data.duplicate.windowId,index:notification.data.duplicate.index},clearThisNotification)}break;case NotificationConstants.Notifications.DUPLICATES_FOUND.type:0==buttonIndex?(openPopup(Urls.POPUP.DUPLICATES),clearThisNotification()):(await closeDuplicateTabs(!1),clearThisNotification());break;case NotificationConstants.Notifications.URL_ALLOW_LISTED.type:case NotificationConstants.Notifications.URL_BLOCK_LISTED.type:{const tabUrl=Urls.OPTIONS+(0===buttonIndex?OptionsSectionReference.LIST_CONTROL_MODE:OptionsSectionReference.SUPPORT);chrome.tabs.create({url:tabUrl},clearThisNotification);break}case NotificationConstants.Notifications.ADDED_TO_DOMAIN_BLOCK_LIST.type:{const tabUrl=Urls.OPTIONS+(0===buttonIndex?OptionsSectionReference.DOMAIN_BLOCK_LIST:OptionsSectionReference.SUPPORT);chrome.tabs.create({url:tabUrl},clearThisNotification);break}case NotificationConstants.Notifications.WEEKLY_STATS.type:0==buttonIndex?chrome.tabs.create({url:Urls.STATS},clearThisNotification):chrome.tabs.create({url:Urls.OPTIONS+OptionsSectionReference.SUPPORT},clearThisNotification);break;case NotificationConstants.Notifications.EXTENSION_UPDATED.type:0==buttonIndex?chrome.tabs.create({url:Urls.UPDATE_NOTES},clearThisNotification):chrome.tabs.create({url:Urls.OPTIONS+OptionsSectionReference.SUPPORT},clearThisNotification);break;case NotificationConstants.Notifications.ACS_PROMPT.type:0==buttonIndex?chrome.tabs.create({url:Urls.ACS_CWS},clearThisNotification):chrome.tabs.create({url:Urls.OPTIONS+OptionsSectionReference.SUPPORT},clearThisNotification);break;case NotificationConstants.Notifications.TAB_LIMIT_EXCEEDED.type:0==buttonIndex?chrome.tabs.create({url:Urls.OPTIONS+OptionsSectionReference.TAB_LIMIT}):chrome.tabs.create({url:Urls.OPTIONS+OptionsSectionReference.SUPPORT});break;default:console.warn("Unknown notification: ",notificationId),clearThisNotification()}else chrome.tabs.create({url:Urls.OPTIONS+OptionsSectionReference.SUPPORT})},showWeeklyStatsNotification:async function(){const{closedDuplicates:closedDuplicates,weeklyNotificationTimestamp:weeklyNotificationTimestamp}=await ls.get({closedDuplicates:DefaultSettings.CLOSED_DUPLICATES,weeklyNotificationTimestamp:DefaultSettings.WEEKLY_NOTIFICATION_TIMESTAMP}),count=closedDuplicates.filter((duplicate=>duplicate.timestamp>weeklyNotificationTimestamp)).length;if(count>20&&weeklyNotificationTimestamp>0){const notification=create(NotificationConstants.Notifications.WEEKLY_STATS);notification.title=chrome.i18n.getMessage("notification_title_weekly_stats_many"),notification.message=chrome.i18n.getMessage("notification_message_weekly_stats_many",count+""),closedDuplicates.length<=MIN_SHOW_STATS_PAGE&&delete notification.buttons,showNotification(notification)}else if(closedDuplicates.length>MIN_SHOW_STATS_PAGE&&count>0){const notification=create(NotificationConstants.Notifications.WEEKLY_STATS);notification.title=chrome.i18n.getMessage("notification_title_weekly_stats_one"),notification.message=chrome.i18n.getMessage("notification_message_weekly_stats_one",closedDuplicates.length+""),showNotification(notification)}else console.debug("No notification condition satisfied");ls.set({weeklyNotificationTimestamp:Date.now()})},showNotification:showNotification,create:create,clearNotification:async function(notification){if(notification.allowDuplicates)return console.warn("Multiple notifications of type allowed. Cannot close.",notification);const st=await ls.get({notifications:DefaultSettings.NOTIFICATIONS_LIST});st.notifications=st.notifications.filter((n=>n.type!=notification.type)),ls.set(st)},updateNotificationStyle:async function(notificationType){const notificationTypes=Array.isArray(notificationType)?notificationType.map((n=>n.type)):[notificationType.type],st=await ls.get({notifications:DefaultSettings.NOTIFICATIONS_LIST});if(0==st.notifications.length)return;const updateNotificationsList=st.notifications.filter((n=>notificationTypes.includes(n.type)));st.notifications=st.notifications.filter((n=>!notificationTypes.includes(n.type))),await ls.set(st),showMultipleNotifications(updateNotificationsList)},set isSupporter(value){isSupporter!==value&&(isSupporter=value,isSupporter&&async function(updates,notificationId){if(!updates||0==updates.length)return;const st=await ls.get({notifications:DefaultSettings.NOTIFICATIONS_LIST});st.notifications=st.notifications.map((n=>{if(notificationId&&n.id!==notificationId)return n;updates.forEach((u=>n[u.key]=u.value));const checksumObj={title:n.title,message:n.message,contextMessage:n.contextMessage,buttons:n.buttons,tabId:n.tabId,type:n.type,data:n.data,showSupportCFButton:n.showSupportCFButton};return n.checksum=Utils.simpleChecksum(Utils.serialize(checksumObj)),n})),ls.set(st)}([{key:"showSupportCFButton",value:!1}]))}}}();