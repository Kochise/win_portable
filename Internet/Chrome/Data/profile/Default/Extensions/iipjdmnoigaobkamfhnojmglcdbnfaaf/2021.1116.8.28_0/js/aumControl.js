const AumControl=function(){let aumSet=DefaultSettings.ADVANCED_URL_MATCHING_SET,matchableAumList=toMatchableList(aumSet);function init(premiumEnabled){aumSet=premiumEnabled?Settings.advancedUrlMatchingSet:DefaultSettings.ADVANCED_URL_MATCHING_SET,matchableAumList=toMatchableList(aumSet)}function toMatchableList(set){return Object.keys(set).sort(((a,b)=>set[a].order-set[b].order)).map((k=>set[k].url))}function cleanUrl(url){return Utils.cleanUrl(url,{ignoreHash:!0,ignoreQuery:!0,removeProtocol:!0})}return{init:init,getIgnoreForUrl:function(url){const ignoreHash=Settings.ignoreHash,ignoreQuery=Settings.ignoreQuery;if(ignoreHash&&ignoreQuery)return{ignoreHash:ignoreHash,ignoreQuery:ignoreQuery};const cleanedUrl=cleanUrl(url),matchedUrl=matchableAumList.find((k=>cleanedUrl.length>=k.length&&cleanedUrl.substr(0,k.length)===k));if(!matchedUrl)return{ignoreHash:ignoreHash,ignoreQuery:ignoreQuery};const urlKey=Utils.simpleChecksum(matchedUrl),aumItem=aumSet[urlKey];return{ignoreHash:ignoreHash||aumItem.ignoreHash,ignoreQuery:ignoreQuery||aumItem.ignoreQuery}},onStorageChanged:function(changes,premiumEnabled){let somethingChanged=!1;return(changes.hasOwnProperty("advancedUrlMatchingSet")||changes.hasOwnProperty("premiumState"))&&(init(premiumEnabled),somethingChanged=!0),somethingChanged},cleanUrl:cleanUrl}}();