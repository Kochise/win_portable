const ListControl=function(){let controlListRegex,listControlMode=ListControlMode.ALLOW_LIST,controlList=[],domainBlocklist=[];function init(){listControlMode=Settings.listControlMode,controlList=listControlMode==ListControlMode.BLOCK_LIST?Settings.blockList:Settings.allowList,controlListRegex=makeControlListRegex(controlList),Settings.isDomainBlocklistEnabled&&(domainBlocklist=Settings.domainBlocklist.map((d=>d.toLowerCase())))}function makeControlListRegex(controlList){if(!controlList||0==controlList.length)return;const regexString=controlList.map(Utils.escapeRegex).join("|");return RegExp(`.*${regexString}.*`,"i")}function addToControlList(url){url=url.replace(/\/$/,""),controlList.includes(url)||(controlList=[].concat(controlList,[url]),listControlMode==ListControlMode.BLOCK_LIST?Settings.blockList=controlList:Settings.allowList=controlList)}function isDomainBlocklisted(url){return!(0==domainBlocklist.length||!url)&&domainBlocklist.includes(Utils.getDomainFromUrl(url).toLowerCase())}return{init:init,isAllowed:function(url){return!isDomainBlocklisted(url)&&(url=Suspender.cleanSuspended(url),controlListRegex||(controlListRegex=makeControlListRegex(controlList)),listControlMode==ListControlMode.BLOCK_LIST?!controlListRegex||!controlListRegex.test(url):!!controlListRegex&&controlListRegex.test(url))},removeAllowedTabs:function(tabList){return listControlMode==ListControlMode.BLOCK_LIST?controlListRegex?tabList.filter((tab=>controlListRegex.test(tab.url))):[]:controlListRegex?tabList.filter((tab=>!controlListRegex.test(tab.url))):tabList},addUrl:async function(details){var _a;(details=details||{}).notify=null===(_a=details.notify)||void 0===_a||_a;let url=details.url;if(!details.url){const activeTab=await Utils.getCurrentTab();if(!activeTab)return;url=activeTab.url}const cleanUrl=Suspender.cleanSuspended(url);if(addToControlList(cleanUrl),!details.notify)return;const notification=NotificationManager.create(listControlMode==ListControlMode.BLOCK_LIST?NotificationConstants.Notifications.URL_BLOCK_LISTED:NotificationConstants.Notifications.URL_ALLOW_LISTED);notification.message=`Page: ${cleanUrl}`,await NotificationManager.showNotification(notification)},addDomain:async function(details){var _a;let url;if((details=details||{}).notify=null===(_a=details.notify)||void 0===_a||_a,details.url)url=details.url;else{const activeTab=await Utils.getCurrentTab();if(!activeTab)return;url=activeTab.url}const domain=Utils.getDomainFromUrl(url);if(!domain||!domain.includes("."))return console.debug("No domain or invalid domain",domain);if(addToControlList(domain),!details.notify)return;const notification=NotificationManager.create(listControlMode==ListControlMode.BLOCK_LIST?NotificationConstants.Notifications.URL_BLOCK_LISTED:NotificationConstants.Notifications.URL_ALLOW_LISTED);notification.message=`Domain: ${domain}`,await NotificationManager.showNotification(notification)},isDomainBlocklisted:isDomainBlocklisted,addToDomainBlocklist:async function(details){var _a;let url;if((details=details||{}).notify=null===(_a=details.notify)||void 0===_a||_a,details.url)url=details.url;else{const activeTab=await Utils.getCurrentTab();if(!activeTab)return;url=activeTab.url}const domain=Utils.getDomainFromUrl(url);if(!domain||!domain.includes("."))return void console.debug("No domain or invalid domain",domain);if(domainBlocklist.includes(domain.toLowerCase()))return void console.debug("Domain already in block list");let oldDomainBlocklist=Settings.domainBlocklist;if(oldDomainBlocklist=[].concat(oldDomainBlocklist,[domain]),Settings.domainBlocklist=oldDomainBlocklist,!details.notify)return;const notification=NotificationManager.create(NotificationConstants.Notifications.ADDED_TO_DOMAIN_BLOCK_LIST);notification.message=`Domain: ${domain}`,await NotificationManager.showNotification(notification)},onStorageChanged:async function(changes){let somethingChanged=!1;return changes.hasOwnProperty("listControlMode")&&(init(),somethingChanged=!0),changes.hasOwnProperty("allowList")&&listControlMode==ListControlMode.ALLOW_LIST&&(init(),somethingChanged=!0),changes.hasOwnProperty("blockList")&&listControlMode==ListControlMode.BLOCK_LIST&&(init(),somethingChanged=!0),changes.hasOwnProperty("domainBlocklist")&&Settings.isDomainBlocklistEnabled&&(domainBlocklist=Settings.domainBlocklist.map((d=>d.toLowerCase()))),changes.hasOwnProperty("isDomainBlocklistEnabled")&&(domainBlocklist=Settings.isDomainBlocklistEnabled?Settings.domainBlocklist.map((d=>d.toLowerCase())):[]),somethingChanged}}}();