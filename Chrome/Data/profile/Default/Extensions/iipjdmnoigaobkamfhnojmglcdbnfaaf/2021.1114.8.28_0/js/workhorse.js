chrome.tabs.onCreated.addListener(TabHost.onTabCreated),chrome.tabs.onUpdated.addListener(TabHost.onTabUpdated),chrome.tabs.onReplaced.addListener(TabHost.onTabReplaced),chrome.tabs.onRemoved.addListener(TabHost.onTabRemoved),chrome.windows.onRemoved.addListener(TabHost.onWindowRemoved),chrome.tabs.onDetached.addListener(TabHost.onTabDetached),chrome.tabs.onAttached.addListener(TabHost.onTabAttached),chrome.tabs.onActivated.addListener(TabHost.onTabActivated),chrome.tabs.onMoved.addListener(TabHost.onTabMoved),chrome.webRequest.onBeforeRedirect.addListener(TabHost.onRedirect,{urls:["<all_urls>"]});const Omnibox=function(){function resetOmniboxSuggestion(){chrome.omnibox.setDefaultSuggestion({description:"<match><url>Search Tabs</url></match><dim> [ </dim><match>Website title or URL</match><dim> ]</dim>"})}const Disposition=Object.freeze({CURRENT_TAB:"currentTab",NEW_TAB:"newForegroundTab",NEW_BACKGROUND_TAB:"newBackgroundTab"});return{onInputStarted:resetOmniboxSuggestion,onInputCancelled:resetOmniboxSuggestion,onInputChanged:function(text,callback){if(function(text){const description=`<match><url>Search Tabs</url></match><dim> [ </dim><match>${Utils.makeXMLSafe(text)||"Website title or URL"}</match><dim> ]</dim>`;chrome.omnibox.setDefaultSuggestion({description:description})}(text),console.debug(`input: '${text}'`),text){return void callback(function(filterText){const FILTER_REGEX=new RegExp(filterText.split(" ").map((e=>`(?=.*${e})`)).join(""),"i");return TabHost.tabList.filter((tab=>FILTER_REGEX.test(tab.title)||FILTER_REGEX.test(Suspender.cleanSuspended(tab.url)))).sort(((a,b)=>a.tabId>b.tabId?-1:b.tabId>a.tabId?1:0)).sort(((a,b)=>a.pinned&&b.pinned?0:a.pinned?-1:b.pinned?1:0))}(text).map((tab=>({content:tab.url,description:`<dim>${Utils.makeXMLSafe(tab.title)}</dim> <url>${Utils.makeXMLSafe(Suspender.cleanSuspended(tab.url))}</url>`,deletable:!1}))))}const defaultSuggestionsList=function(){const defaultSuggestionsTabList=TabHost.tabList.filter((tab=>!tab.pinned)).reverse();return TabHost.tabList.filter((tab=>tab.pinned)).concat(defaultSuggestionsTabList).slice(0,10)}();if(0==defaultSuggestionsList.length)return;callback(defaultSuggestionsList.map((tab=>({content:tab.url,description:`<dim>${Utils.makeXMLSafe(tab.title)}</dim> <url>${Utils.makeXMLSafe(Suspender.cleanSuspended(tab.url))}</url>`,deletable:!1}))))},onInputEntered:function(selectedUrl,disposition){const tab=TabHost.tabList.find((tab=>tab.url===selectedUrl));tab?TabHost.switchToTab({originalTab:{url:selectedUrl,id:tab.tabId},makeActive:disposition!=Disposition.NEW_BACKGROUND_TAB,moveToWindowId:tab.windowId,isBlockListedDomainMatch:!1}):chrome.tabs.query({currentWindow:!0,active:disposition!=Disposition.NEW_BACKGROUND_TAB},(()=>chrome.tabs.update({url:`https://www.google.co.uk/search?q=${selectedUrl}`})))}}}();function restoreLost(){TabHost.getLostTabs((lostTabs=>{lostTabs.forEach((tab=>chrome.tabs.create({url:Utils.addDedupToURL(tab.url)},(newTab=>TabHost.addToInitList(newTab)))));const notification=NotificationManager.create(NotificationConstants.Notifications.TABS_RESTORED);1===lostTabs.length?notification.message=chrome.i18n.getMessage("notification_message_tabs_restored_one"):lostTabs.length>1&&(notification.message=chrome.i18n.getMessage("notification_message_tabs_restored_many",lostTabs.length+"")),NotificationManager.showNotification(notification)}))}function toggleState(){return chrome.commands.getAll((commands=>{if(!commands||0==commands.length)return;const commandsObj=Utils.arrayToObject(commands,"name");chrome.contextMenus.update(ContextMenu.BROWSER_ACTION.TOGGLESTATE,{title:`Switch to ${state.enabled?"passive":"active"} mode${commandsObj.toggleState&&commandsObj.toggleState.shortcut?` (${commandsObj.toggleState.shortcut})`:""}`},(()=>chrome.runtime.lastError&&console.warn(chrome.runtime.lastError)))})),state.enabled=!state.enabled,updateVisibleState(),localSt.set({extensionEnabled:state.enabled}),updateDuplicateTabURLs(),checkDuplicatesAndUpdateState(!0),state.enabled}function updateVisibleState(){setBadgeColour(),updateBrowserActionState(),TabHost.sendMessageToAllTabs({type:MessageType.STATE_UPDATED,state:state.enabled})}const browserActionTitleHaveDuplicates=chrome.i18n.getMessage("browser_action_title_has_duplicates"),browserActionTitleHaveUpdateNotes=chrome.i18n.getMessage("browser_action_title_have_update_notes"),browserActionTitleHaveDuplicatesHaveNotes=chrome.i18n.getMessage("browser_action_title_has_duplicates_have_duplicates");function updateBrowserActionState(){const title=TabHost.hasDuplicates&&state.updateNotesAvailable?browserActionTitleHaveDuplicatesHaveNotes:TabHost.hasDuplicates?browserActionTitleHaveDuplicates:state.updateNotesAvailable?browserActionTitleHaveUpdateNotes:chrome.i18n.getMessage("browser_action_title_default",[state.enabled?"on":"off",TabHost.tabCount+""]),icon=TabHost.hasDuplicates&&state.enabled&&state.updateNotesAvailable?Icon.BROWSER_ACTION.ENABLED_DUPLICATES_WITH_UPDATES:TabHost.hasDuplicates&&state.enabled?Icon.BROWSER_ACTION.ENABLED_DUPLICATES:TabHost.hasDuplicates&&state.updateNotesAvailable?Icon.BROWSER_ACTION.DISABLED_DUPLICATES_WITH_UPDATES:TabHost.hasDuplicates?Icon.BROWSER_ACTION.DISABLED_DUPLICATES:state.enabled&&state.updateNotesAvailable?Icon.BROWSER_ACTION.ENABLED_CLEAN_WITH_UPDATES:state.enabled?Icon.BROWSER_ACTION.ENABLED_CLEAN:state.updateNotesAvailable?Icon.BROWSER_ACTION.DISABLED_CLEAN_WITH_UPDATES:Icon.BROWSER_ACTION.DISABLED_CLEAN;setBrowserActionState({icon:icon,title:title})}let previousDuplicateCount=TabHost.duplicateCount,previousHasDuplicates=TabHost.hasDuplicates;function checkDuplicatesAndUpdateState(notify=!1){const duplicateCount=TabHost.markDuplicateTabs();if(TabHost.hasDuplicates&&state.enabled&&notify){const notification=NotificationManager.create(NotificationConstants.Notifications.DUPLICATES_FOUND);notification.message=1===duplicateCount?chrome.i18n.getMessage("notification_message_duplicates_found_one"):chrome.i18n.getMessage("notification_message_duplicates_found_many",duplicateCount+""),notification.buttons[0].isDisabled=!1,NotificationManager.showNotification(notification)}updateBrowserActionState(),previousDuplicateCount!=duplicateCount&&((0!=previousDuplicateCount&&0==duplicateCount||0==previousDuplicateCount&&0!=duplicateCount)&&setDuplicatesContextMenu(),updateDuplicatesPopup(),previousDuplicateCount=duplicateCount,previousHasDuplicates=TabHost.hasDuplicates)}async function closeDuplicateTabs(notify=!1){const removedDuplicatesCount=await TabHost.removeDuplicateTabs();if(updateVisibleState(),!notify)return removedDuplicatesCount;const notification=NotificationManager.create(NotificationConstants.Notifications.PREVIOUS_DUPLICATES_REMOVED);return notification.message=1===removedDuplicatesCount?chrome.i18n.getMessage("notification_message_duplicates_removed_one"):chrome.i18n.getMessage("notification_message_duplicates_removed_many",removedDuplicatesCount+""),await NotificationManager.showNotification(notification),removedDuplicatesCount}function updateDuplicateTabURLs(){const duplicateTabs=TabHost.tabList.filter((t=>t.isDuplicate));0!=duplicateTabs.length&&duplicateTabs.forEach((t=>{chrome.tabs.sendMessage(t.tabId,{type:MessageType.UPDATE_URL,value:{url:state.enabled?Utils.addDedupToURL(t.url):Utils.removeDedupFromURL(t.url),replaceState:!0}})}))}