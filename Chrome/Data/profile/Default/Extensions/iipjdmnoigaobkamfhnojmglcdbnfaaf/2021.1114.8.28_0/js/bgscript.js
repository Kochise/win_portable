const state={enabled:void 0,updateNotesAvailable:!1},shortName=chrome.i18n.getMessage("shortName"),upgradeNotification=!1,updateNotesIndicator=!0;async function onUpgrade(previousVersion,currentVersion){console.debug("Running updates...");if(Utils.getVersionNumberFromString(previousVersion)<8.16){let changesMade=!1;const st=await Settings.get(["browserAction","showContextMenu","whitelist","domainBlacklist","isDomainBlacklistEnabled","allowList","domainBlocklist","isDomainBlocklistEnabled"]),updatedSt=Object.assign({},st);if("whitelist"==updatedSt.browserAction?(changesMade=!0,updatedSt.browserAction=BrowserAction.ALLOW_LIST):"whitelist_domain"==updatedSt.browserAction&&(changesMade=!0,updatedSt.browserAction=BrowserAction.ALLOW_LIST_DOMAIN),updatedSt.showContextMenu){const contextMenuItems=updatedSt.showContextMenu.split(","),whitelistIndex=contextMenuItems.indexOf("whitelist");whitelistIndex>-1&&(changesMade=!0,contextMenuItems[whitelistIndex]="allow_list");const whitelistDomainIndex=contextMenuItems.indexOf("whitelist_domain");whitelistDomainIndex>-1&&(changesMade=!0,contextMenuItems[whitelistDomainIndex]="allow_list_domain"),updatedSt.showContextMenu=contextMenuItems.join(",")}updatedSt.whitelist&&(updatedSt.allowList=updatedSt.whitelist.concat(),changesMade=!0),updatedSt.domainBlacklist&&(updatedSt.domainBlocklist=updatedSt.domainBlacklist.concat(),changesMade=!0),null!=updatedSt.isDomainBlacklistEnabled&&(updatedSt.isDomainBlocklistEnabled=updatedSt.isDomainBlacklistEnabled,changesMade=!0,updatedSt.isDomainBlocklistEnabled&&(updatedSt[GRANDFATHERED_DOMAIN_BLOCKLIST_USERS]=!0)),changesMade&&(await Settings.set(updatedSt),await Settings.remove(["whitelist","domainBlacklist","isDomainBlacklistEnabled"]),chrome.runtime.reload())}console.debug("Finished updates.")}function showUpdateNotification(reason,version){const notification=NotificationManager.create(NotificationConstants.Notifications.EXTENSION_UPDATED);notification.title=chrome.i18n.getMessage("install"===reason?"notification_title_extension_installed":"notification_title_extension_updated",chrome.i18n.getMessage("shortName")),notification.contextMessage=chrome.i18n.getMessage("install"===reason?"notification_context_message_extension_installed":"notification_context_message_extension_updated",version),NotificationManager.showNotification(notification)}function checkTabLimitAndUpdate(){if(!Settings.tabCountLimitEnabled)return setBadgeColour(),void NotificationManager.clearNotification(NotificationConstants.Notifications.TAB_LIMIT_EXCEEDED);const tabLimit=Settings.tabCountLimit,tabCount=TabHost.tabCount;if(tabCount>tabLimit?setBadgeColour(BadgeColours.OVER_LIMIT):tabCount>.75*tabLimit?setBadgeColour(BadgeColours.NEAR_LIMIT):setBadgeColour(),tabCount>tabLimit){const notificationDetails=NotificationManager.create(NotificationConstants.Notifications.TAB_LIMIT_EXCEEDED);notificationDetails.message=chrome.i18n.getMessage("notification_tab_limit_message",`(${tabLimit})`),NotificationManager.showNotification(notificationDetails)}else NotificationManager.clearNotification(NotificationConstants.Notifications.TAB_LIMIT_EXCEEDED)}async function onPremiumStateUpdate(){const premiumEnabled=await License.isSupporter();premiumEnabled&&removeContextMenu(ContextMenu.BROWSER_ACTION.SUPPORT),NotificationManager.isSupporter=premiumEnabled,setUninstallURL()}async function openPopup(popupUrl=Urls.POPUP.TAB_SEARCH,options){const currentWindow=await new Promise((resolve=>chrome.windows.getCurrent(resolve))),themeString=`theme=${Settings.cfWindowTheme}`,currentWindowParam=popupUrl!==Urls.POPUP.TAB_SEARCH?"":`currWindow=${currentWindow.id}&`,optionsParams=options?Object.keys(options).map((k=>`${k}=${options[k]}`)).join("&"):"";popupUrl=popupUrl+"?"+(currentWindowParam||"")+(optionsParams?`${optionsParams}&`:"")+themeString;const tabs=await new Promise((resolve=>chrome.tabs.query({url:chrome.runtime.getURL("*"),windowType:"popup"},resolve)));if(chrome.runtime.lastError&&console.debug("No tabs for extension",chrome.runtime.lastError.message),!tabs||0==tabs.length){const newWindowOptions={focused:!0,type:"popup",width:Settings.popup_size?Settings.popup_size.w:DefaultSettings.POPUP_SIZE.w,height:Settings.popup_size?Settings.popup_size.h:DefaultSettings.POPUP_SIZE.h,url:popupUrl};return Settings.popup_size&&Settings.popup_size.x&&(newWindowOptions.left=Settings.popup_size.x),Settings.popup_size&&Settings.popup_size.y&&(newWindowOptions.top=Settings.popup_size.y),void chrome.windows.create(newWindowOptions)}tabs[0].url!==popupUrl&&(await new Promise((resolve=>chrome.tabs.update(tabs[0].id,{url:popupUrl,active:!0},resolve))),chrome.runtime.lastError),chrome.windows.update(tabs[0].windowId,{focused:!0,drawAttention:!0})}async function setupWeeklyStatsAlarm(weeklyNotificationType){if(weeklyNotificationType===NotificationStyle.OFF)return chrome.alarms.clear(Alarms.STATS);const st=await localSt.get({weeklyNotificationTimestamp:DefaultSettings.WEEKLY_NOTIFICATION_TIMESTAMP});chrome.alarms.create(Alarms.STATS,{when:st.weeklyNotificationTimestamp+6048e5,periodInMinutes:10080})}function setBadgeText(text){Settings.showCount?chrome.browserAction.setBadgeText({text:text.toString()}):chrome.browserAction.setBadgeText({text:""})}function setBadgeColour(colour){null==colour&&(colour=state.enabled?BadgeColours.ON:BadgeColours.OFF),chrome.browserAction.setBadgeBackgroundColor({color:colour})}function setBrowserActionState(details){chrome.browserAction.setIcon({path:details.icon,tabId:details.tabId}),chrome.browserAction.setTitle({title:details.title,tabId:details.tabId})}function setupPopupAction(floatingSearchWindow,browserAction){!1===floatingSearchWindow&&browserAction==BrowserAction.POPUP?chrome.browserAction.setPopup({popup:Urls.POPUP.TAB_SEARCH_ATTACHED}):chrome.browserAction.setPopup({popup:""})}function browserActionClickHandler(){switch(Settings.browserAction){case BrowserAction.DUPLICATE:TabHost.duplicateThisTab();break;case BrowserAction.ALLOW_LIST:ListControl.addUrl();break;case BrowserAction.ALLOW_LIST_DOMAIN:ListControl.addDomain();break;case BrowserAction.MOVE_TO_LAST:TabHost.moveToLast();break;case BrowserAction.TOGGLESTATE:toggleState();break;case BrowserAction.POPUP:default:openPopup()}}async function removeContextMenus(menuItemIds){if(!menuItemIds||0==menuItemIds.length)return;const menuItemId=menuItemIds.shift();await removeContextMenu(menuItemId),await removeContextMenus(menuItemIds)}async function setContentContextMenus(){const allContentMenus=Object.keys(ContextMenu.CONTENT).map((k=>ContextMenu.CONTENT[k]));allContentMenus.push("content_master");const labelMenuAddTabControlList=chrome.i18n.getMessage(Settings.listControlMode==ListControlMode.BLOCK_LIST?"contextMenuText_block_list":"contextMenuText_allow_list"),labelMenuAddDomainControlList=chrome.i18n.getMessage(Settings.listControlMode==ListControlMode.BLOCK_LIST?"contextMenuText_block_list_domain":"contextMenuText_allow_list_domain");if(await removeContextMenus(allContentMenus),!Settings.showContextMenu)return;const commands=await new Promise((resolve=>chrome.commands.getAll(resolve))),commandsObj=commands&&commands.length>0?Utils.arrayToObject(commands,"name"):{};let pageContextMenuIDs=Settings.showContextMenu.split(",");if(await License.isSupporter()||(pageContextMenuIDs=pageContextMenuIDs.filter((item=>"close_domain_duplicates"!==item))),0!==pageContextMenuIDs.length){if(1==pageContextMenuIDs.length){const contextMenuItem=pageContextMenuIDs[0];let title;switch(contextMenuItem){case"allow_list":title=labelMenuAddTabControlList;break;case"allow_list_domain":title=labelMenuAddDomainControlList;break;default:title=chrome.i18n.getMessage(`contextMenuText_${contextMenuItem}`)}return commandsObj[contextMenuItem]&&commandsObj[contextMenuItem].shortcut&&(title+=` (${commandsObj[contextMenuItem].shortcut})`),void(title?await createContextMenu({type:"normal",id:"content_"+contextMenuItem,title:title,contexts:["page"]}):console.warn("Didn't find any title for",contextMenuItem))}await createContextMenu({type:"normal",id:"content_master",title:chrome.i18n.getMessage("shortName"),contexts:["page"]}),pageContextMenuIDs.forEach((async contextMenuItem=>{let title;switch(contextMenuItem){case"allow_list":title=labelMenuAddTabControlList;break;case"allow_list_domain":title=labelMenuAddDomainControlList;break;default:title=chrome.i18n.getMessage(`contextMenuText_${contextMenuItem}`)}commandsObj[contextMenuItem]&&commandsObj[contextMenuItem].shortcut&&(title+=` (${commandsObj[contextMenuItem].shortcut})`),title?await createContextMenu({type:"normal",id:"content_"+contextMenuItem,title:title,contexts:["page"],parentId:"content_master"}):console.warn("Didn't find any title for",contextMenuItem)}))}}function setDuplicatesContextMenu(){0!=TabHost.duplicateCount?chrome.contextMenus.create({type:"normal",title:"Duplicate tabs found",id:"browserAction_duplicates_master",contexts:["browser_action"]},(async()=>{chrome.runtime.lastError;const enableListDuplicatesItem=await License.isSupporter()||Date.now()>DUPLICATE_PREMIUM_CUTOFF,listDuplicatesTitle=chrome.i18n.getMessage("contextMenuText_listDuplicates")+(enableListDuplicatesItem?"":" (Supporters only)");chrome.contextMenus.create({type:"normal",title:listDuplicatesTitle,id:ContextMenu.BROWSER_ACTION.LIST_DUPLICATES,contexts:["browser_action"],parentId:"browserAction_duplicates_master",enabled:enableListDuplicatesItem},(()=>{chrome.runtime.lastError,chrome.contextMenus.create({type:"normal",title:chrome.i18n.getMessage("contextMenuText_closeAllDuplicates"),id:ContextMenu.BROWSER_ACTION.CLOSE_ALL_DUPLICATES,contexts:["browser_action"],parentId:"browserAction_duplicates_master"},(()=>chrome.runtime.lastError))}))})):removeContextMenus(["browserAction_duplicates_master",ContextMenu.BROWSER_ACTION.LIST_DUPLICATES,ContextMenu.BROWSER_ACTION.CLOSE_ALL_DUPLICATES])}async function setBrowserActionContextMenus(){const labelMenuAddTabControlList=chrome.i18n.getMessage(Settings.listControlMode==ListControlMode.BLOCK_LIST?"contextMenuText_block_list":"contextMenuText_allow_list"),menuIdsForRemoval=BROWSER_ACTION_CONTEXT_MENU_LIST.map((i=>`browserAction_${i}`));await removeContextMenus(menuIdsForRemoval);const commands=await new Promise((resolve=>chrome.commands.getAll(resolve))),commandsObj=commands&&commands.length>0?Utils.arrayToObject(commands,"name"):{};BROWSER_ACTION_CONTEXT_MENU_LIST.forEach((async contextMenuItem=>{const menuItemId=`browserAction_${contextMenuItem}`;if(menuItemId==ContextMenu.BROWSER_ACTION.CLOSE_ALL_DUPLICATES)return void setDuplicatesContextMenu();if(menuItemId==ContextMenu.BROWSER_ACTION.SUPPORT&&await License.isSupporter())return;let title="allow_list"==contextMenuItem?labelMenuAddTabControlList:chrome.i18n.getMessage(`contextMenuText_${contextMenuItem}`);menuItemId==ContextMenu.BROWSER_ACTION.TOGGLESTATE&&(title=`Switch to ${state.enabled?"passive":"active"} mode`),title?(title+=commandsObj[contextMenuItem]&&commandsObj[contextMenuItem].shortcut?` (${commandsObj[contextMenuItem].shortcut})`:"",await createContextMenu({type:"toggleState_separator"===contextMenuItem?"separator":"normal",id:menuItemId,title:title,contexts:["browser_action"]})):"toggleState_separator"!==contextMenuItem&&console.warn("Didn't find any title for",contextMenuItem)}))}async function createContextMenu(options){return new Promise((resolve=>chrome.contextMenus.create(options,(()=>{chrome.runtime.lastError&&console.log("if context menu not created, it should show here: ",chrome.runtime.lastError.message),resolve()}))))}async function removeContextMenu(menuItemId){return new Promise((resolve=>chrome.contextMenus.remove(menuItemId,(()=>{chrome.runtime.lastError&&console.log("error removing menu item: ",chrome.runtime.lastError.message),resolve()}))))}function contextMenuHandler(info,tab){switch(info.menuItemId){case ContextMenu.BROWSER_ACTION.TOGGLESTATE:toggleState();break;case ContextMenu.BROWSER_ACTION.DUPLICATE:TabHost.duplicateThisTab();break;case ContextMenu.BROWSER_ACTION.ALLOW_LIST:ListControl.addUrl({url:tab.url});break;case ContextMenu.BROWSER_ACTION.RESTORELOST:restoreLost();break;case ContextMenu.BROWSER_ACTION.CLOSE_ALL_DUPLICATES:closeDuplicateTabs(!0);break;case ContextMenu.BROWSER_ACTION.LIST_DUPLICATES:openPopup(Urls.POPUP.DUPLICATES);break;case ContextMenu.BROWSER_ACTION.SUPPORT:chrome.tabs.create({url:Urls.OPTIONS+OptionsSectionReference.SUPPORT});break;case ContextMenu.CONTENT.DUPLICATE:TabHost.duplicateThisTab();break;case ContextMenu.CONTENT.ALLOW_LIST:ListControl.addUrl({url:tab.url});break;case ContextMenu.CONTENT.ALLOW_LIST_DOMAIN:ListControl.addDomain({url:tab.url});break;case ContextMenu.CONTENT.MOVETOLAST:TabHost.moveToLast(tab.id);break;case ContextMenu.CONTENT.CLOSE_DOMAIN_DUPLICATES:TabHost.closeOtherTabsForSameDomain(tab);break;case ContextMenu.CONTENT.LIST_DOMAIN_DUPLICATES:Settings.floatingSearchWindow&&openDuplicatesForDomain(tab);break;default:console.warn("Unidentified context menu",info.menuItemId)}}function goToTab(tabId,focusWindow){const activateTab=tab=>{chrome.tabs.update(tabId,{active:!0},(activeTab=>{Suspender.isSuspended(tab.url)&&focusWindow&&TabHost.setSuspendTab(activeTab.id,!1)}))};chrome.tabs.get(tabId,(tab=>{if(!chrome.runtime.lastError&&tab)return focusWindow?void chrome.windows.update(tab.windowId,{focused:!0},(()=>activateTab(tab))):activateTab(tab);console.warn("Tab not found or other error:",tabId,chrome.runtime.lastError)}))}async function openDuplicatesForDomain(tab){let currentTab;if(tab)currentTab=tab;else{const activeTab=await Utils.getCurrentTab();if(!activeTab)return;currentTab=activeTab}const currentDomain=Utils.getDomainFromUrl(currentTab.url);openPopup(Urls.POPUP.TAB_SEARCH,{[KEY_TAB_SEARCH_FILTER_TEXT]:currentDomain})}function updateDuplicatesPopup(){chrome.tabs.query({url:"chrome-extension://iipjdmnoigaobkamfhnojmglcdbnfaaf/*",windowType:"popup"},(tabs=>{chrome.runtime.lastError,tabs&&0!=tabs.length&&chrome.tabs.sendMessage(tabs[0].id,{type:MessageType.UPDATE_DUPLICATES})}))}async function populateAllTabsWithContentScript(){const scriptArray=["/js/ext/jquery-3.3.1.min.js","/js/ext/lodash.min.js","/js/constants.js","/js/ls.js","/js/utils.js","/js/settings.js","/js/listControl.js","/js/aumControl.js","/js/cf.js","/js/notificationConstants.js","/js/notify.js"],cssArray=["/css/cf.css","/css/notify.css"],HTTP_URLS_TEST=/^https?\:\/\//i,CWS_URLS_TEST=/^https\:\/\/chrome.google.com\/webstore/i;(await new Promise((resolve=>chrome.windows.getAll({populate:!0},resolve)))).flatMap((w=>w.tabs)).filter((tab=>!tab.discarded&&HTTP_URLS_TEST.test(tab.url)&&!CWS_URLS_TEST.test(tab.url))).forEach((async tab=>{console.debug("tab",tab.url),await(async(tabId,scripts)=>{if(scripts&&0!=scripts.length)for(const script of scripts)if(await new Promise((resolve=>chrome.tabs.executeScript(tabId,{file:script,allFrames:!0},(()=>resolve())))),chrome.runtime.reload)return})(tab.id,_.clone(scriptArray)),await(async(tabId,styles)=>{if(styles&&0!=styles.length)for(const style of styles)if(await new Promise((resolve=>chrome.tabs.insertCSS(tabId,{file:style,allFrames:!0},(()=>resolve())))),chrome.runtime.reload)return})(tab.id,_.clone(cssArray))}))}async function setUninstallURL(){const premiumEnabled=await License.isSupporter();chrome.management.getSelf((e=>"development"!=e.installType&&chrome.runtime.setUninstallURL(premiumEnabled?Urls.UNINSTALL:"")))}chrome.runtime.onInstalled.addListener((async details=>{if("chrome_update"==details.reason)return void TabHost.onInstallOrUpdate();const version=chrome.runtime.getManifest().version;if(setUninstallURL(),"install"===details.reason&&(License.onInstall(),chrome.alarms.create(Alarms.EXTENSION_INSTALLED_CHECK_DUPLICATES,{delayInMinutes:1})),"install"===details.reason)setTimeout((()=>showUpdateNotification(details.reason,version)),5e3);else if(version!=details.previousVersion){const{lastUpdateNotesVersion:lastUpdateNotesVersion}=await ls.get({lastUpdateNotesVersion:""});lastUpdateNotesVersion!=version&&(await ls.set({updateNotesIndicator:!0}),state.updateNotesAvailable=!0)}const{acsNotificationShown:acsNotificationShown}=await localSt.get({acsNotificationShown:!1});if(!acsNotificationShown){const isAcsInstalled=await MessageSender.sendMessageToExtension(ACS_EXTENSION_ID,"checkAlive");if(!chrome.runtime.lastError&&isAcsInstalled)localSt.set({acsInstalled:isAcsInstalled,acsNotificationShown:!0});else{const ONE_DAY_IN_MS=864e5,startDay=Date.now()+("install"===details.reason?5:5/24)*ONE_DAY_IN_MS;chrome.alarms.create(Alarms.ACS_NOTIFICATION,{when:Utils.randomDate(startDay,startDay+1*ONE_DAY_IN_MS,8,19).getTime()})}}"update"===details.reason&&onUpgrade(details.previousVersion,version),populateAllTabsWithContentScript(),TabHost.onInstallOrUpdate()})),chrome.runtime.onUpdateAvailable.addListener((()=>chrome.runtime.reload())),chrome.browserAction.onClicked.addListener(browserActionClickHandler),chrome.commands.onCommand.addListener((async pressedCommand=>{const command=(await License.isSupporter()?Settings.keyboardCommandActions:DefaultSettings.KEYBOARD_COMMAND_ACTIONS)[pressedCommand];switch(command){case KeyboardCommands.DUPLICATE:TabHost.duplicateThisTab();break;case KeyboardCommands.ALLOW_LIST:ListControl.addUrl();break;case KeyboardCommands.ALLOW_LIST_DOMAIN:ListControl.addDomain();break;case KeyboardCommands.SWITCH_MODE:toggleState();break;case KeyboardCommands.MOVE_TAB_TO_END:TabHost.moveToLast();break;case KeyboardCommands.MOVE_TAB_TO_FIRST:TabHost.moveToFirst();break;case KeyboardCommands.ADD_TO_DOMAIN_BLOCKLIST:ListControl.addToDomainBlocklist({notify:!0});break;case KeyboardCommands.CLOSE_ALL_DUPLICATES:closeDuplicateTabs(!0);break;case KeyboardCommands.OPEN_CF_SETTINGS:chrome.runtime.openOptionsPage();break;case KeyboardCommands.OPEN_CHROME_SETTINGS:chrome.tabs.create({url:"chrome://settings/"});break;case KeyboardCommands.OPEN_DUPLICATE_TABS_LIST:Settings.floatingSearchWindow&&openPopup(Urls.POPUP.DUPLICATES);break;case KeyboardCommands.OPEN_TAB_SEARCH:Settings.floatingSearchWindow&&openPopup(Urls.POPUP.TAB_SEARCH);break;case KeyboardCommands.PIN_TAB:TabHost.togglePinTab();break;case KeyboardCommands.SUSPEND_TAB:TabHost.toggleSuspendTab();break;case KeyboardCommands.CLOSE_DOMAIN_DUPLICATES:TabHost.closeOtherTabsForSameDomain();break;case KeyboardCommands.LIST_DOMAIN_DUPLICATES:Settings.floatingSearchWindow&&openDuplicatesForDomain();break;case void 0:console.warn("Unknown pressed command:",pressedCommand);break;case"":break;default:console.warn("Unhandled command:",command)}})),chrome.contextMenus.onClicked.addListener(contextMenuHandler),chrome.runtime.onMessage.addListener(((message,sender,sendResponse)=>{var _a;if(message&&message.type)switch(message.params=message.params||[],message.type){case MessageType.GET_TAB_COUNT:sendResponse(TabHost.tabCount);break;case MessageType.GET_TAB_LIST:sendResponse({tabList:TabHost.tabList,windowId:sender.tab.windowId,state:state.enabled});break;case MessageType.SWITCH_TO_TAB:return message.fromPopup?void goToTab(message.params[0],message.params[1]):message.tabId&&sender.tab&&sender.tab.id?(chrome.tabs.get(message.tabId,(originalTab=>chrome.runtime.lastError||!originalTab?sendResponse(!1):TabHost.isDuplicate({url:message.url,windowId:originalTab.windowId},originalTab)?void chrome.tabs.get(sender.tab.id,(duplicateTab=>{if(chrome.runtime.lastError||!duplicateTab)return sendResponse(!1);TabHost.closeAndSwitch({originalTab:originalTab,duplicateTab:duplicateTab,fromContentScript:!0,ctrlKey:message.ctrlKey,shiftKey:message.shiftKey}),sendResponse(!0)})):sendResponse(!1))),!0):sendResponse(!1);case MessageType.TOGGLE_STATE:return void sendResponse({value:toggleState()});case MessageType.DUPLICATE_THIS_TAB:return TabHost.duplicateThisTab(...message.params).then(sendResponse),!0;case MessageType.ALLOWLIST_THIS_LINK:return void ListControl.addUrl(...message.params);case MessageType.ALLOWLIST_THIS_DOMAIN:return void ListControl.addDomain(...message.params);case MessageType.MOVE_TO_NEW_WINDOW:return void chrome.windows.create({tabId:message.params[0],focused:!1});case MessageType.MOVE_TO_FIRST:return void TabHost.moveToFirst(...message.params);case MessageType.MOVE_TO_LAST:return void TabHost.moveToLast(...message.params);case MessageType.REMOVE_EXISTING_DUPLICATES:return closeDuplicateTabs(null!==(_a=message.params[0])&&void 0!==_a&&_a).then(sendResponse),!0;case MessageType.GET_DUPLICATES_LIST:return TabHost.getDuplicateTabsList().then(sendResponse),!0;case MessageType.RESTORE_LOST:return void restoreLost();case MessageType.GET_EXTENSION_STATE:return void sendResponse({value:state.enabled});case MessageType.NOTIFICATION_BUTTON_CLICK:return void NotificationManager.onButtonClick(message.params[0],message.params[1],message.params[2]);case MessageType.WHO_AM_I:return void sendResponse({tabId:sender.tab.id,windowId:sender.tab.windowId});case MessageType.OPEN_SETTINGS:return void(message.params&&message.params[0]?chrome.tabs.create({url:Urls.OPTIONS+message.params[0]}):chrome.runtime.openOptionsPage());case MessageType.REFRESH_PURCHASED:return License.refreshPurchases().then(sendResponse),!0;case MessageType.GET_DATA:return License.getData().then(sendResponse),!0;case MessageType.GET_IS_SUPPORTER:return License.isSupporter().then(sendResponse),!0;case MessageType.SAVE_REWARD_CODE:return License.saveRewardCode(message.params[0]).then(sendResponse),!0;case MessageType.STRIPE_GET_CUSTOMER_PORTAL_URL:return License.getCustomerPortalUrl().then(sendResponse),!0;default:console.warn("Unidentified request %s from %s",message.type,sender,message)}})),MessageSender.sendMessageToExtension(ACS_EXTENSION_ID,"checkAlive").then((isInstalled=>!chrome.runtime.lastError&&isInstalled&&localSt.set({acsInstalled:isInstalled}))),chrome.runtime.onMessageExternal.addListener((async(message,sender,sendResponse)=>{if(ExtensionMessageAllowlist.includes(sender.id))sendResponse(!0);else if("object"==typeof message&&Object.keys(message).includes("type"))if("update_subscription"===message.type)message.s==GRACE_CODE&&(console.debug("Updating subscriptions"),await License.startGracePeriod(),await License.refreshPurchases()),chrome.runtime.openOptionsPage();else console.debug("Unknown message",message.type)})),chrome.alarms.onAlarm.addListener((async alarm=>{if(!await License.onAlarm(alarm))switch(alarm.name){case Alarms.TABCLEANER:TabHost.cleanTabList().then(checkDuplicatesAndUpdateState);break;case Alarms.STATS:NotificationManager.showWeeklyStatsNotification();break;case Alarms.EXTENSION_INSTALLED_CHECK_DUPLICATES:checkDuplicatesAndUpdateState(!0);break;case Alarms.ACS_NOTIFICATION:{const{acsNotificationShown:acsNotificationShown}=await localSt.get({acsNotificationShown:!1}),isInstalled=await MessageSender.sendMessageToExtension(ACS_EXTENSION_ID,"checkAlive");if(isInstalled&&localSt.set({acsInstalled:isInstalled,acsNotificationShown:!0}),acsNotificationShown||isInstalled)break;NotificationManager.showNotification(NotificationManager.create(NotificationConstants.Notifications.ACS_PROMPT)),localSt.set({acsNotificationShown:!0});break}case"cws_purchases_checker":break;default:console.warn("Unidentified alarm: "+alarm.name)}})),chrome.notifications.onButtonClicked.addListener(NotificationManager.onButtonClick),chrome.notifications.onClicked.addListener(NotificationManager.onNotificationClick),chrome.omnibox.onInputStarted.addListener(Omnibox.onInputStarted),chrome.omnibox.onInputCancelled.addListener(Omnibox.onInputCancelled),chrome.omnibox.onInputChanged.addListener(Omnibox.onInputChanged),chrome.omnibox.onInputEntered.addListener(Omnibox.onInputEntered),chrome.storage.onChanged.addListener((async changes=>{if(!changes)return;await Settings.onChanged(changes);const controlListUpdated=await ListControl.onStorageChanged(changes),premiumEnabled=await License.isSupporter(),aumListUpdated=AumControl.onStorageChanged(changes,premiumEnabled);if(changes.hasOwnProperty("browserAction")&&changes.browserAction.hasOwnProperty("newValue")&&setupPopupAction(Settings.floatingSearchWindow,Settings.browserAction),changes.hasOwnProperty("floatingSearchWindow")&&changes.floatingSearchWindow.hasOwnProperty("newValue")&&setupPopupAction(Settings.floatingSearchWindow,Settings.browserAction),changes.hasOwnProperty("notifyOthers")&&changes.notifyOthers.hasOwnProperty("newValue")&&NotificationManager.updateNotificationStyle([NotificationConstants.Notifications.TABS_RESTORED,NotificationConstants.Notifications.URL_ALLOW_LISTED,NotificationConstants.Notifications.URL_BLOCK_LISTED,NotificationConstants.Notifications.ADDED_TO_DOMAIN_BLOCK_LIST,NotificationConstants.Notifications.PREVIOUS_DUPLICATES_REMOVED]),changes.hasOwnProperty("notifyPreviousDuplicates")&&changes.notifyPreviousDuplicates.hasOwnProperty("newValue")&&NotificationManager.updateNotificationStyle(NotificationConstants.Notifications.DUPLICATES_FOUND),changes.hasOwnProperty("notifyBackgroudDuplicatesClosed")&&changes.notifyBackgroudDuplicatesClosed.hasOwnProperty("newValue")&&NotificationManager.updateNotificationStyle(NotificationConstants.Notifications.DUPLICATE_CLOSED),changes.hasOwnProperty("notifyWeeklyStats")&&changes.notifyWeeklyStats.hasOwnProperty("newValue")&&setupWeeklyStatsAlarm(Settings.notifyWeeklyStats),changes.hasOwnProperty("showCount")&&changes.showCount.hasOwnProperty("newValue")&&setBadgeText(TabHost.tabCount.toLocaleString()),changes.hasOwnProperty("showContextMenu")&&changes.showContextMenu.hasOwnProperty("newValue")&&setContentContextMenus(),(controlListUpdated||aumListUpdated||changes.hasOwnProperty("ignoreQuery")||changes.hasOwnProperty("ignoreHash"))&&checkDuplicatesAndUpdateState(),changes.hasOwnProperty("listControlMode")){setBrowserActionContextMenus();const contextMenus=Settings.showContextMenu.split(",");(contextMenus.includes("allow_list")||contextMenus.includes("allow_list_domain"))&&setContentContextMenus()}(changes.hasOwnProperty("tabCountLimit")||changes.hasOwnProperty("tabCountLimitEnabled"))&&checkTabLimitAndUpdate(),changes.premiumState&&onPremiumStateUpdate(),changes.hasOwnProperty("updateNotesIndicator")&&(state.updateNotesAvailable=1==changes.updateNotesIndicator.newValue,updateBrowserActionState())})),async function(){await Settings.init();const lSt=await localSt.get({extensionEnabled:DefaultSettings.EXTENSION_ENABLED});state.enabled="off"!=Settings.startState&&lSt.extensionEnabled,"off"==Settings.startState&&localSt.set({extensionEnabled:state.enabled}),setupPopupAction(Settings.floatingSearchWindow,Settings.browserAction),setBrowserActionContextMenus(),ListControl.init();const premiumEnabled=await License.isSupporter();AumControl.init(premiumEnabled),TabHost.init(),TabHost.setCountChangeListener((()=>{setBadgeText(TabHost.tabCount.toLocaleString()),checkDuplicatesAndUpdateState(),checkTabLimitAndUpdate()})),setContentContextMenus(),setupWeeklyStatsAlarm(Settings.notifyWeeklyStats),updateVisibleState(),chrome.alarms.create(Alarms.TABCLEANER,{when:Date.now(),periodInMinutes:2}),chrome.alarms.create(Alarms.EXTENSION_INSTALLED_CHECK_DUPLICATES,{delayInMinutes:2}),License.showStripeUpgradeScreen()}(),setTimeout(onPremiumStateUpdate,5e3);