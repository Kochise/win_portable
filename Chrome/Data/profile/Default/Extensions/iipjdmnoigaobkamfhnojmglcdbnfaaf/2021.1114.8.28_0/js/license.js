const License=function(){const BASE_URL="https://subs.oorjalabs.com",getPurchasesUrl=`${BASE_URL}/subs/get`,uploadPurchaseUrl=`${BASE_URL}/subs/save`,KEY_REWARD_PRODUCT="rewardProduct",ALARM={CHECK_CWS_PURCHASES:{ID:"cws_purchases_checker",FREQUENCY:1440},EXPIRE_GRACE_PERIOD:{ID:"expire_grace_period",DELAY:1440}};let mTs=Date.now(),mRemotePurchases=[],mRewardProduct={},mProducts=[],mProductsTs=0,mSubs=[],mActiveSubs=[],mSubsFetchTs=0,mState=LicenseUtils.State.NON_SUPPORTER,mSupporter=!1,mGracets=null,mWasCwsSupporter=!1,mIsInitialised=!1,mLastForceRefreshTs=0;async function init(){var _a,_b;if(mIsInitialised)return;const st=await ls.getObject({remotePurchases:mRemotePurchases,[KEY_REWARD_PRODUCT]:mRewardProduct,cwsPurchases:[],purchases:[],_subs:mSubs,_subsFetch:0,_graceTs:mGracets,_state:mState,ts:mTs,_products:mProducts,_productsTs:0,_lastForceRefreshTs:mLastForceRefreshTs});({ts:mTs,_subs:mSubs,_subsFetch:mSubsFetchTs,_graceTs:mGracets,_state:mState,[KEY_REWARD_PRODUCT]:mRewardProduct,_products:mProducts,_productsTs:mProductsTs,_lastForceRefreshTs:mLastForceRefreshTs}=st),mWasCwsSupporter=(null===(_a=st.cwsPurchases)||void 0===_a?void 0:_a.length)>0||(null===(_b=st.purchases)||void 0===_b?void 0:_b.length)>0,await _updateAndSaveStateForSubs(mSubs),mState=_calculatePremiumState();const validRemotePurchaseThreshold=Date.now()-26784e5;mRemotePurchases=st.remotePurchases.filter((license=>license.timestamp>=validRemotePurchaseThreshold)),chrome.alarms.getAll((alarms=>{alarms.find((a=>a.name==ALARM.CHECK_CWS_PURCHASES.ID))||createPurchaseCheckerAlarm()})),mIsInitialised=!0,await _fetchSubs()}function createPurchaseCheckerAlarm(){chrome.alarms.create(ALARM.CHECK_CWS_PURCHASES.ID,{periodInMinutes:ALARM.CHECK_CWS_PURCHASES.FREQUENCY})}async function getState(includeSubs=!1){await init();const subs=includeSubs?{subs:mSubs}:{};return Object.assign({isSupporter:mSupporter,state:mState,lastRefresh:mLastForceRefreshTs},subs)}let fetchedProducts=!1;async function _fetchSubs(forceRefresh=!1){if(!mIsInitialised)return void console.warn("Fetch subs before init!");const now=Date.now();if(!forceRefresh&&mSubsFetchTs>now-864e5&&mSubsFetchTs<now)return;const getSubsUrl=`${BASE_URL}/subs/stripe`,hash=await StripeUtils.getEmailHash();if(hash){console.debug("Updating user subs...");try{const response=await fetch(getSubsUrl,{body:hash,mode:"cors",method:"POST"});if(!response.ok){const errorMessage=response.statusText+await response.text();return void console.warn("Subs id fetch error",errorMessage)}const subResponse=await response.json();console.debug(`Got ${subResponse.length} subs response.`,subResponse),await _updateAndSaveStateForSubs(subResponse,!0),await _updateRefreshedTime(),async function(){const hash=await StripeUtils.getEmailHash();if(!hash)return;if(0==mActiveSubs.length)return void await _refreshRemotePurchases();const message={licenses:StripeUtils.purchasesToLicenseItem(mActiveSubs,hash)};try{const response=await fetch(uploadPurchaseUrl,{body:JSON.stringify(message),mode:"cors",method:"POST"});if(response.ok){const answer=await response.json();return console.debug("Upload response",answer),void await _refreshRemotePurchases()}const errorMessage=response.statusText+await response.text();console.debug("Upload error",errorMessage)}catch(e){console.warn(e)}}()}catch(e){console.warn(e)}}else await _updateAndSaveStateForSubs([],!0)}async function _refreshRemotePurchases(){const hash=await StripeUtils.getEmailHash();if(hash)try{const response=await fetch(getPurchasesUrl,{body:hash,method:"POST"});if(!response.ok){const message=response.statusText+await response.text();return void console.debug("Error response",message)}const licenseDetails=await response.json();console.debug("Refresh remote response",licenseDetails.licenses);const receivedLicenses=(licenseDetails&&licenseDetails.licenses?licenseDetails.licenses:[]).filter((license=>"android"==license.platform));mRemotePurchases=receivedLicenses,mState=_calculatePremiumState(),mSupporter=StripeUtils.isPremiumEnabled(mState),await ls.set({remotePurchases:receivedLicenses,_state:mState})}catch(e){console.warn(e)}}async function refreshPurchases(){const fiveMinutesAgo=Date.now()-18e6;if(mLastForceRefreshTs>fiveMinutesAgo)return getState(!0);if(await init(),await _fetchSubs(!0),0==mActiveSubs.length){await async function(){const rewardProduct=Object.assign({},mRewardProduct);if(!rewardProduct.rewardCode||!rewardProduct.activationCode)return void console.debug("No rewards to activate or verify");if(null==rewardProduct.expiry&&null==rewardProduct.verified)return await _activateRewardCode(rewardProduct);const wasVerified=rewardProduct.verified;if(rewardProduct.verified&&rewardProduct.expiry>Date.now()){const updatedVerified=await async function(rewardProduct){if(!(null==rewardProduct?void 0:rewardProduct.rewardCode)||!(null==rewardProduct?void 0:rewardProduct.activationCode)||!(null==rewardProduct?void 0:rewardProduct.verified)||(null==rewardProduct?void 0:rewardProduct.expiry)<Date.now())return!1;const message={rewardCode:rewardProduct.rewardCode,activationCode:rewardProduct.activationCode},rewardVerificationUrl=`${BASE_URL}/rewards/verify`;try{const response=await fetch(rewardVerificationUrl,{body:JSON.stringify(message),mode:"cors",method:"POST"});if(!response.ok){const errorMessage=response.statusText+await response.text();return console.warn("Reward verification error",errorMessage),null}const expiry=await response.text();if(console.debug("Reward verification response",expiry),!expiry||isNaN(Number(expiry)))rewardProduct.verified=!1,rewardProduct.expiry=0;else{const expiryTimestamp=parseInt(expiry);expiryTimestamp<Date.now()?(rewardProduct.verified=!1,rewardProduct.expiry=0):(rewardProduct.verified=!0,rewardProduct.expiry=expiryTimestamp)}return mRewardProduct=Object.assign({},rewardProduct),mState=_calculatePremiumState(),mSupporter=StripeUtils.isPremiumEnabled(mState),await ls.set({[KEY_REWARD_PRODUCT]:rewardProduct,_state:mState}),rewardProduct.verified}catch(e){return console.warn(e),null}}(rewardProduct);return wasVerified!=updatedVerified}}()&&await _updateRefreshedTime()}return getState(!0)}async function _activateRewardCode(rewardProduct){if(!rewardProduct||!rewardProduct.rewardCode||!rewardProduct.activationCode)return!1;const message={rewardCode:rewardProduct.rewardCode,activationCode:rewardProduct.activationCode},rewardActivationUrl=`${BASE_URL}/rewards/activate`;try{const response=await fetch(rewardActivationUrl,{body:JSON.stringify(message),mode:"cors",method:"POST"});if(!response.ok){const errorMessage=response.statusText+await response.text();return console.warn("Reward activation error",errorMessage),null}const expiry=await response.text();if(console.debug("Reward activation response",expiry),!expiry||isNaN(Number(expiry)))rewardProduct.verified=!1,rewardProduct.expiry=0;else{const expiryTimestamp=parseInt(expiry);expiryTimestamp<Date.now()?(rewardProduct.expiry=0,rewardProduct.verified=!1):(rewardProduct.expiry=expiryTimestamp,rewardProduct.verified=!0)}return mRewardProduct=Object.assign({},rewardProduct),mState=_calculatePremiumState(),mSupporter=StripeUtils.isPremiumEnabled(mState),await ls.set({[KEY_REWARD_PRODUCT]:rewardProduct,_state:mState}),rewardProduct.verified}catch(e){return console.warn(e),null}}async function _updateRefreshedTime(){mLastForceRefreshTs=Date.now(),await ls.set({_lastForceRefreshTs:mLastForceRefreshTs})}async function _updateAndSaveStateForSubs(subs,doSave=!1){const now=Date.now();mSubs=subs.map((s=>Object.assign(s,{lastUpdated:now,name:StripeUtils.cleanProductName(s.name)}))),mActiveSubs=mSubs.filter(StripeUtils.isSupporterSub),mActiveSubs.length>0&&(mGracets=null),mState=_calculatePremiumState(),mSupporter=StripeUtils.isPremiumEnabled(mState),mSubsFetchTs=now,doSave&&await ls.set({_subs:mSubs,_subsFetch:mSubsFetchTs,_graceTs:mGracets,_state:mState})}function _calculatePremiumState(){return mActiveSubs.length>0||mRemotePurchases.length>0?LicenseUtils.State.SUPPORTER:mState===LicenseUtils.State.GRACE_PERIOD&&StripeUtils.isGracePeriodValid(mGracets)?LicenseUtils.State.GRACE_PERIOD:mRewardProduct.verified&&mRewardProduct.expiry>Date.now()?LicenseUtils.State.REWARD:mSubs.length>mActiveSubs.length||mWasCwsSupporter?LicenseUtils.State.EXPIRED:LicenseUtils.State.NON_SUPPORTER}var StripeUtils=function(){const _premiumStateList=[LicenseUtils.State.GRACE_PERIOD,LicenseUtils.State.SUPPORTER,LicenseUtils.State.REWARD];return{purchasesToLicenseItem:function(purchases,hash){const now=Date.now();return purchases.map((purchase=>({hash:hash,orderId:purchase.id,packageName:chrome.runtime.id,platform:"stripe_chrome",purchaseTime:1e3*purchase.start_date,sku:purchase.price.id,displayName:purchase.name,state:purchase.status,timestamp:now,type:"stripe"})))},isPremiumEnabled:function(state){return _premiumStateList.includes(state)},getEmailHash:async function(){const email=await Utils.getEmailAddress();return email?sha256(`${email};dZpLywTXiCq3xebUpTx47WNLzxbHZdtSJnEPw4QJJZtTM;${chrome.runtime.id}`):""},cleanProductName:function(productName){return productName.replace(/Clutter Free/i,"").trim()},isSupporterSub:function(sub){return!sub.ended_at&&["trialing","active"].includes(sub.status)},isGracePeriodValid:function(graceTs){return null!=graceTs&&Date.now()-graceTs<=864e5},getCurrency:async function(){const getGeoPlugin=fetch("http://www.geoplugin.net/json.gp").then((result=>{if(result.ok)return result.json();throw new Error("Invalid error")})).then((json=>{var _a;return null===(_a=json.geoplugin_currencyCode)||void 0===_a?void 0:_a.toLowerCase()})),getGeoIp=fetch("https://json.geoiplookup.io/").then((result=>{if(result.ok)return result.json();throw new Error("Invalid error")})).then((json=>{var _a;return null===(_a=json.currency_code)||void 0===_a?void 0:_a.toLowerCase()})),timeout=new Promise((resolve=>setTimeout((()=>resolve("")),1e3)));return Promise.any([getGeoPlugin,getGeoIp,timeout])},getRandomToken:function(){const randomPool=new Uint8Array(32);crypto.getRandomValues(randomPool);let hex="";for(let i=0;i<randomPool.length;++i)hex+=randomPool[i].toString(16);return hex}}}();return init(),{getData:async function(){const state=await getState();return state.state!==LicenseUtils.State.SUPPORTER&&state.state!==LicenseUtils.State.GRACE_PERIOD&&await async function(force=!1){await init();const fetchedWithinLastDay=Date.now()-mProductsTs<864e5;if((mProducts.length>0&&fetchedWithinLastDay||fetchedProducts)&&!force)return mProducts;mProducts=[],fetchedProducts=!0;const currency=await StripeUtils.getCurrency(),getProductsUrl=`${BASE_URL}/subs/products`;console.debug("Asking for products");try{const response=await fetch(getProductsUrl,{body:currency,mode:"cors",method:"POST"});if(!response.ok){const errorMessage=response.statusText+await response.text();return console.warn("Products fetch error",errorMessage),[]}const products=await response.json();return console.debug(`${products.length} Products fetched response`),mProducts=products.map((p=>Object.assign(p,{name:StripeUtils.cleanProductName(p.name)}))),mProductsTs=Date.now(),await ls.set({_products:mProducts,_productsTs:mProductsTs}),products}catch(e){return console.warn(e),[]}}(),{subs:mSubs,products:mProducts,state:state,reward:mRewardProduct,ts:mTs,remotePurchases:mRemotePurchases}},isSupporter:async function(){return await init(),mSupporter},startGracePeriod:async function(){await init(),mGracets>0||(mState=LicenseUtils.State.GRACE_PERIOD,mGracets=Date.now(),mSupporter=StripeUtils.isPremiumEnabled(mState),await ls.set({_graceTs:mGracets,_state:mState}),chrome.alarms.create(ALARM.EXPIRE_GRACE_PERIOD.ID,{delayInMinutes:ALARM.EXPIRE_GRACE_PERIOD.DELAY}))},refreshPurchases:refreshPurchases,saveRewardCode:async function(rewardCode){const activationCode=StripeUtils.getRandomToken();if(!activationCode)return console.warn("User with no hash trying to activate reward code"),!1;const rewardProduct={rewardCode:rewardCode,activationCode:activationCode};return await ls.set({[KEY_REWARD_PRODUCT]:rewardProduct}),mRewardProduct=Object.assign({},rewardProduct),await _activateRewardCode(rewardProduct)},onInstall:async function(){await init(),createPurchaseCheckerAlarm(),await refreshPurchases()},onAlarm:async function(alarm){switch(alarm.name){case ALARM.CHECK_CWS_PURCHASES.ID:refreshPurchases();break;case ALARM.EXPIRE_GRACE_PERIOD.ID:!async function(){await init(),mState=_calculatePremiumState(),mSupporter=StripeUtils.isPremiumEnabled(mState),await ls.set({_state:mState}),await refreshPurchases()}();break;default:return!1}return!0},getCustomerPortalUrl:async function(){const getCustomerPortalUrlEndpoint=`${BASE_URL}/subs/customerPortal`,hash=await StripeUtils.getEmailHash();if(hash)try{const response=await fetch(getCustomerPortalUrlEndpoint,{body:hash,mode:"cors",method:"POST"});if(!response.ok){const errorMessage=response.statusText+await response.text();return void console.warn("Customer portal url fetch error",errorMessage)}return(await response.json()).url}catch(e){return void console.warn(e)}},showStripeUpgradeScreen:async function(){if(await init(),mState==LicenseUtils.State.SUPPORTER||mSubs.length>0)return;const st=await ls.getObject({stripeUpgradeSeen:!1,purchases:[]});st.stripeUpgradeSeen||0==st.purchases.length||(chrome.tabs.create({url:chrome.runtime.getURL("options.html#support")}),await ls.set({stripeUpgradeSeen:!0}))},reinit:init}}();