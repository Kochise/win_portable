fn match_expr() {
	a := 10
	match a {
		10 { println('10') }
		20 { println('20') }
		else {}
	}
}

fn match_expr_assignment() {
	a := 20
	_ := match a {
		10 { 10 }
		5 { 5 }
		else { 2 }
	}
}

fn match_branch_comment() {
	a := 1
	match a {
		1 {
			println('1')
		}
		2 {
			println('2')
		}
		else {
			// do nothing
		}
	}
}

fn really_long_branch_exprs() {
	match x {
		ArrayInit, AsCast, Assoc, AtExpr, BoolLiteral, CallExpr, CastExpr, ChanInit, CharLiteral,
		ConcatExpr, Comment, EnumVal, FloatLiteral, GoExpr, Ident, IfExpr, IndexExpr, IntegerLiteral,
		Likely, LockExpr, MapInit, MatchExpr, None, OrExpr, ParExpr, PostfixExpr, PrefixExpr,
		RangeExpr, SelectExpr, SelectorExpr, SizeOf, SqlExpr, StringInterLiteral, StringLiteral,
		StructInit, Type, TypeOf, UnsafeExpr {
			return expr.pos
		}
		InfixExpr {
			Foo{
				x: 3
			}
		}
	}
}
