export declare function flattenDeep<T>(matrix: T[][]): T[];
export declare function has(object: unknown, key: string): boolean;
export declare function last<T>(array: T[]): T;
export declare function mapValues<T, U>(object: Record<string, T>, iteratee: (e: T, key?: string) => U): Record<string, U>;
export declare function minBy<T>(list: T[], fn: (e: T) => number): T;
export declare function range(start: number, end: number): any[];
export declare function sortBy<T>(list: T[], fn: (e: T) => number): T[];
export declare function uniqueId(prefix: string): string;
export declare function values<T>(object: Record<string, T>): T[];
export declare function array<T>(count: number, factory: () => T): T[];
export declare function isUndefined(item: unknown): boolean;
export declare function each<T>(obj: Record<string, T>, action: (item: T, key: string) => void): void;
export declare function isEmpty(obj: Record<string, unknown>): boolean;
export declare function union(a: string[], b: string[]): string[];
