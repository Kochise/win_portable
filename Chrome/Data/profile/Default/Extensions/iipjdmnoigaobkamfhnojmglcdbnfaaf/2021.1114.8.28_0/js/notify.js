!function(){let currentTheme=Theme.DARK;const me={tabId:null,windowId:null},notificationTimers={};let notificationsInitialised=!1;async function setup(){const hasNotificationDiv=$("#cf_notif_div_izj1nl07zu").length>0;if(!Settings.inPageNotificationsEnabled)return void(hasNotificationDiv&&$("#cf_notif_div_izj1nl07zu").remove());hasNotificationDiv||($("body").append(`\n                <div id="cf_notif_div_izj1nl07zu" class="cf_div_position_south ${currentTheme} ${"dark"==Utils.lightOrDark($("body"))?"dark_body":"light_body"}">\n                    <div id="all_notification_actions">\n                        <a href="#" class="all_notification_action_button" title="Clear all notifications" id="clear_all"><img src="${Icon.CLEAR_ALL_NOTIFICATIONS}"></a>\n                        <a href="#" class="all_notification_action_button" title="Notification settings" id="open_settings"><img src="${Icon.NOTIFY_SETTINGS}"></a>\n                    </div>\n                </div>`),$("#all_notification_actions").hide()),setNotificationTheme(Settings.inPageNotificationTheme);const response=await MessageSender.sendMessage({type:MessageType.WHO_AM_I});me.tabId=response.tabId,me.windowId=response.windowId;const{notifications:notifications}=await localSt.get({notifications:DefaultSettings.NOTIFICATIONS_LIST});notifications.length>0&&updateNotifications(notifications),notificationsInitialised||($("body").on("click","#clear_all",(async e=>{if(e.preventDefault(),!isAlive)return;const existingNotifications=$(".cf_notification").toArray().map((e=>e.id));closeNotifications(existingNotifications);try{const st=await localSt.get({notifications:DefaultSettings.NOTIFICATIONS_LIST});st.notifications=st.notifications.filter((n=>!existingNotifications.includes(n.id))),localSt.set(st)}catch(error){console.debug("error",error),isAlive=!1}return!1})),$("body").on("click","#open_settings",(e=>{if(e.preventDefault(),isAlive){try{MessageSender.sendMessage({type:MessageType.OPEN_SETTINGS,params:[OptionsSectionReference.NOTIFICATIONS]},!0)}catch(error){console.debug("error",error),isAlive=!1}return!1}})),$("body").on("click",".closeButton",(async e=>{if(e.preventDefault(),!isAlive)return;const notificationId=e.currentTarget.dataset.id;if(notificationId){closeNotifications([notificationId]);try{const st=await localSt.get({notifications:DefaultSettings.NOTIFICATIONS_LIST});st.notifications=st.notifications.filter((n=>n.id!=notificationId)),localSt.set(st)}catch(error){console.debug("error",error),isAlive=!1}}return!1})),$("body").on("click",".action_button",(e=>{if(e.preventDefault(),!isAlive||e.currentTarget.classList.contains("disabled"))return;const notificationId=e.currentTarget.dataset.id,notificationType=e.currentTarget.dataset.type,dismissOnClick="true"==e.currentTarget.dataset.dismissonclick,buttonId=e.currentTarget.id.replace(`_${notificationId}`,"");if(notificationId&&buttonId){try{MessageSender.sendMessage({type:MessageType.NOTIFICATION_BUTTON_CLICK,params:[notificationId,parseInt(buttonId),notificationType]},!0)}catch(error){console.debug("error",error),isAlive=!1}return 9!=buttonId&&dismissOnClick&&closeNotifications([notificationId]),!1}})),notificationsInitialised=!0)}function setNotificationTheme(newTheme){$("#cf_notif_div_izj1nl07zu").removeClass(currentTheme).addClass(newTheme),currentTheme=newTheme}function updateNotifications(notifications,tabFilteredAddOnly=!1){const existingNotifications=$(".cf_notification").toArray().map((e=>({id:e.id,checksum:e.dataset.checksum})));if(!tabFilteredAddOnly){closeNotifications(existingNotifications.filter((n=>!notifications.find((notif=>notif.id==n.id)))).map((n=>n.id)))}const toUpdate=notifications.filter((n=>(n.tabId===NotificationConstants.TabsToNotify.ALL||n.tabId===me.tabId)&&existingNotifications.find((en=>en.id==n.id&&en.checksum!=n.checksum))));closeNotifications(toUpdate.map((n=>n.id)),(()=>{notifications.filter((n=>!existingNotifications.find((en=>en.id==n.id))&&(tabFilteredAddOnly||n.tabId==NotificationConstants.TabsToNotify.ALL))).concat(toUpdate).sort(((a,b)=>b.ts-a.ts)).forEach((notif=>{$("#cf_notif_div_izj1nl07zu").append(function(notification){const isSingleAction=1==notification.buttons.length,isControlListNotification=[NotificationConstants.Notifications.URL_ALLOW_LISTED.type,NotificationConstants.Notifications.URL_BLOCK_LISTED.type,NotificationConstants.Notifications.ADDED_TO_DOMAIN_BLOCK_LIST.type].includes(notification.type);return`\n            <div id="${notification.id}" class="cf_notification" title="${notification.title}" data-checksum=${notification.checksum} data-type="${notification.type}">\n                <span class="closePositioner">\n                    <a href="#" title="Dismiss message" class="closeButton" data-type="${notification.type}" data-id="${notification.id}"><img src="${Icon.CLOSE_NOTIFICATION}"></a>\n                    </span>\n                <div class="content">\n                    <div class="icon ${notification.iconUrl?"":"hidden"}"><img src="${notification.iconUrl}"/></div>\n                    <div class="text">\n                        <div class="title">${notification.title}</div>\n                        <div class="message ${isControlListNotification?"allow_list_message":""}">${notification.message}</div>\n                        <div class="context_message">${notification.contextMessage||""}</div>\n                    </div>\n                </div>\n                <div class="actions">${0==notification.buttons.length?"":notification.buttons.reduce(((acc,button,i)=>`${acc}\n                    <div class="action_button ${isSingleAction&&notification.showSupportCFButton?"only_action":""} ${button.isDisabled?"disabled":""}" id="${i}_${notification.id}" title="${button.isDisabled?"For supporters only till mid-January 2019":button.title}" data-type="${notification.type}" data-id="${notification.id}" data-dismissOnClick="${notification.dismissOnButtonClick}"><img class="action_icon" src="${button.iconUrl}" />\n                        ${button.title}\n                    </div>\n                `),"")}</div>\n                ${notification.showSupportCFButton?`<div class="actions"><div class="action_button gift_note support_cf ${isSingleAction?"only_action":""}" id="9_${notification.id}" title="Support ClutterFree" data-type="${notification.type}" data-id="${notification.id}"><img class="action_icon" src="${Icon.SUPPORT}" />Support ClutterFree</div></div>`:""}\n            </div>`}(notif));const thisTimer=setTimeout((async()=>{closeNotifications([notif.id]);const st=await localSt.get({notifications:DefaultSettings.NOTIFICATIONS_LIST});st.notifications=st.notifications.filter((n=>n.id!=notif.id)),localSt.set(st)}),1e3*notif.durationInSecs);notificationTimers[notif.id]=thisTimer})),updateClearAllToggle()}))}function closeNotifications(toCloseList,callback){if(!toCloseList||0==toCloseList.length)return callback&&callback();toCloseList.forEach((n=>{notificationTimers[n]&&(clearTimeout(notificationTimers[n]),delete notificationTimers[n])}));const toRemove=toCloseList.map((n=>`#${n}`)).join(",");if(!toRemove)return callback&&callback();$(toRemove).fadeOut("fast",(()=>{$(toRemove).remove(),updateClearAllToggle(),callback&&callback()}))}function updateClearAllToggle(){$("#cf_notif_div_izj1nl07zu #all_notification_actions")[0==$(".cf_notification").length?"hide":"show"]()}$((async()=>{await Settings.init(),ListControl.init(),setup()})),chrome.storage.onChanged.addListener((async changes=>{if(!isAlive)return;await Settings.onChanged(changes);const listControlUpdated=await ListControl.onStorageChanged(changes);changes.hasOwnProperty("notifications")&&changes.notifications.hasOwnProperty("newValue")&&updateNotifications(changes.notifications.newValue),changes.hasOwnProperty("inPageNotificationTheme")&&changes.inPageNotificationTheme.hasOwnProperty("newValue")&&setNotificationTheme(changes.inPageNotificationTheme.newValue),(changes.hasOwnProperty("notifyBackgroudDuplicatesClosed")||changes.hasOwnProperty("notifyOthers")||changes.hasOwnProperty("notifyPreviousDuplicates")||changes.hasOwnProperty("notifyWeeklyStats")||listControlUpdated)&&setup()})),chrome.runtime.onMessage.addListener((async message=>{if(isAlive){if(!message.type)return console.debug("Unidentified message",message);switch(message.type){case MessageType.NOTIFY_ACTIVE:{const{notifications:notifications}=await localSt.get({notifications:DefaultSettings.NOTIFICATIONS_LIST}),activeTabNotifications=notifications.filter((n=>n.tabId==NotificationConstants.TabsToNotify.ACTIVE));activeTabNotifications.length>0&&updateNotifications(activeTabNotifications,!0);break}case MessageType.NOTIFY_TAB:{const tabId=message.value,{notifications:notifications}=await localSt.get({notifications:DefaultSettings.NOTIFICATIONS_LIST}),currentTabNotifications=notifications.filter((n=>n.tabId==tabId));currentTabNotifications.length>0&&updateNotifications(currentTabNotifications,!0);break}}}}))}();