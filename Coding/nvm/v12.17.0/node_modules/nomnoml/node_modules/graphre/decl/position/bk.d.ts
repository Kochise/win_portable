import { Alignment, DaGraph } from '../types';
declare type Xs = Record<string, number>;
declare type Xss = Record<Alignment, Xs>;
declare type Conflicts = Record<string, Record<string, boolean>>;
declare type Layer = string[];
export declare function findType1Conflicts(g: DaGraph, layering: Layer[]): Conflicts;
export declare function findType2Conflicts(g: DaGraph, layering: Layer[]): {};
export declare function findOtherInnerSegmentNode(g: DaGraph, v: string): string;
export declare function addConflict(conflicts: Conflicts, v: string, w: string): void;
export declare function hasConflict(conflicts: Conflicts, v: string, w: string): boolean;
export declare function verticalAlignment(g: DaGraph, layering: Layer[], conflicts: Conflicts, neighborFn: (e: string) => string[]): {
    root: Record<string, string>;
    align: Record<string, string>;
};
export declare function horizontalCompaction(g: DaGraph, layering: Layer[], root: Record<string, string>, align: Record<string, string>, reverseSep: boolean): Record<string, number>;
export declare function findSmallestWidthAlignment(g: DaGraph, xss: Xss): Record<string, number>;
export declare function alignCoordinates(xss: Xss, alignTo: Record<string, number>): void;
export declare function balance(xss: Xss, align: Alignment): Record<string, number>;
export declare function positionX(g: DaGraph): Record<string, number>;
export declare function sep(nodeSep: number, edgeSep: number, reverseSep: boolean): (g: DaGraph, v: string, w: string) => number;
export declare function width(g: DaGraph, v: string): number;
export {};
