import { Graph } from "./graph";
import { DaGraph, EdgeLabel, GraphLabel, GraphNode, Rect, Vector } from "./types";
export declare function addDummyNode(g: DaGraph, type: string, attrs: Partial<GraphNode>, name: string): string;
export declare function simplify(g: DaGraph): Graph<GraphLabel, GraphNode, EdgeLabel>;
export declare function asNonCompoundGraph(g: DaGraph): Graph<GraphLabel, GraphNode, EdgeLabel>;
export declare function successorWeights(g: DaGraph): Record<string, Record<string, number>>;
export declare function predecessorWeights(g: DaGraph): Record<string, Record<string, number>>;
export declare function intersectRect(rect: Rect, point: Vector): {
    x: number;
    y: number;
};
export declare function buildLayerMatrix(g: DaGraph): string[][];
export declare function normalizeRanks(g: DaGraph): void;
export declare function removeEmptyRanks(g: DaGraph): void;
export declare function addBorderNode(g: DaGraph, prefix: string, rank?: number, order?: number): string;
export declare function maxRank(g: DaGraph): number;
export declare function partition<T>(collection: T[], fn: (e: T) => boolean): {
    lhs: T[];
    rhs: T[];
};
export declare function time(name: string, fn: Function): Function;
export declare function notime(name: string, fn: Function): any;
