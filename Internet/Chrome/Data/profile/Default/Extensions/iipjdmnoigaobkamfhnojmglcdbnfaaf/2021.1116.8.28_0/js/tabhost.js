const TabHost=function(){let isFirstTabCreated=!1,initList=[],tabList=[];const watchingTabsForRemovalUponReady=[];let duplicateCount=0,onCountChangeListener=null,duplicateTabRemovedCheckTimeout=0;const INTERNAL_URL_REGEX=new RegExp(`^(${Utils.escapeRegex(Urls.POPUP.TAB_SEARCH)}|${Utils.escapeRegex(Urls.POPUP.DUPLICATES)}|${Utils.escapeRegex(Urls.POPUP.ACTIONS)}).*?$`);function getAllTabs(callback){tabList=[],chrome.windows.getAll({populate:!0},(windows=>{windows.forEach((eachWindow=>eachWindow.tabs.forEach((tab=>addToList(tab))))),onCountChangeListener&&onCountChangeListener(tabList.length),console.debug("Created tab list: "+tabList.length),callback&&callback()}))}async function cleanTabList(){await async function(){let discoveredTabsCount=0;return(await new Promise((resolve=>{chrome.windows.getAll({populate:!0},resolve)}))).forEach((eachWindow=>eachWindow.tabs.forEach((tab=>{tabList.find((t=>tab.id==t.tabId))||(addToList(tab),discoveredTabsCount++)})))),onCountChangeListener&&onCountChangeListener(tabList.length),discoveredTabsCount>0&&console.debug("Discovered tabs:",discoveredTabsCount),discoveredTabsCount}(),await async function(){if(0===tabList.length)return;tabList=tabList.filter(((tab,i)=>!tabList.find(((checkTab,j)=>j>i&&checkTab.tabId==tab.tabId&&checkTab.url==tab.url))));const aliveTabs=(await new Promise((resolve=>{chrome.windows.getAll({populate:!0},resolve)}))).reduce(((tabs,eachWindow)=>tabs.concat(eachWindow.tabs)),[]);for(let j=tabList.length-1;j>=0;j--)aliveTabs.find((t=>t.id==tabList[j].tabId))||tabList.splice(j,1);onCountChangeListener&&onCountChangeListener(tabList.length)}()}function removeWatchedTabs(tabId,changeInfo){const indexInWatching=watchingTabsForRemovalUponReady.indexOf(tabId);return-1!=indexInWatching&&("complete"==changeInfo.status&&(chrome.tabs.remove(tabId),watchingTabsForRemovalUponReady.splice(indexInWatching,1)),!0)}function onFirstTabCreated(callback){isFirstTabCreated||(getAllTabs(callback),isFirstTabCreated=!0)}function addToList(newTab,isInitOrBoth){newTab.url=Utils.cleanTrailingSlash(newTab.url),(isInitOrBoth!=INIT&&"both"!=isInitOrBoth||(initList.push({tabId:newTab.id,url:newTab.url,windowId:newTab.windowId,status:newTab.status,pinned:newTab.pinned,domain:Utils.getDomainFromUrl(newTab.url),title:newTab.title,lastActivated:Date.now(),index:newTab.index}),isInitOrBoth!=INIT))&&(tabList.push({tabId:newTab.id,url:newTab.url,previousUrl:Urls.CHROME_NEW_TAB,windowId:newTab.windowId,pinned:newTab.pinned,domain:Utils.getDomainFromUrl(newTab.url),title:newTab.title,index:newTab.index,lastActivated:Date.now(),status:newTab.status}),sendMessageToAllTabs({type:MessageType.TAB_ADDED,tabId:newTab.id,url:newTab.url}))}function updateList(updateObj){if(updateObj.list=updateObj.list||"tabList",updateObj.list==INIT){if(!initList[updateObj.arrIndex])return;return"url"===updateObj.update&&(updateObj.newValue=Utils.cleanTrailingSlash(updateObj.newValue),initList[updateObj.arrIndex].domain=Utils.getDomainFromUrl(updateObj.newValue)),updateObj.updateActivated&&(initList[updateObj.arrIndex].lastActivated=Date.now()),void(initList[updateObj.arrIndex][updateObj.update]=updateObj.newValue)}const oldTab=_.cloneDeep(tabList[updateObj.arrIndex]);if(!oldTab)return;const isLoadComplete=updateObj.status?"complete"==updateObj.status:"complete"==oldTab.status,newUrl="url"===updateObj.update?Utils.cleanTrailingSlash(updateObj.newValue):"",tab=tabList.find((tab=>tab.tabId==oldTab.tabId));if(tab){if(updateObj.status&&(tab.status=updateObj.status),updateObj.title&&(tab.title=updateObj.title),updateObj.pinned&&(tab.pinned=updateObj.pinned),"url"!==updateObj.update)return void(tab[updateObj.update]=updateObj.newValue);if(updateObj.updateActivated&&(tab.lastActivated=Date.now()),!tab.redirecting||Utils.cleanTrailingSlash(tab.redirectUrl)===newUrl){Utils.cleanUrl(newUrl,{ignoreHash:!0})!=Utils.cleanUrl(tab.url,{ignoreHash:!0})&&(tab.previousUrl=tab.url),tab.url=newUrl}tab.redirected=1==tab.redirecting,tab.redirecting=!1,tab.domain=Utils.getDomainFromUrl(tab.url)}let changeType=TabChangeType.OTHERS;switch(updateObj.update){case"url":changeType=TabChangeType.URL;break;case"title":changeType=TabChangeType.TITLE;break;case"tabId":changeType=TabChangeType.TAB_ID}sendMessageToAllTabs({type:MessageType.TAB_UPDATED,tabId:oldTab.tabId,url:oldTab.url,changeType:changeType,newTabId:changeType==TabChangeType.TAB_ID?updateObj.newValue:null,isLoadComplete:isLoadComplete})}function removeFromListByIds(removedTabIds){const preRemovalTabCount=tabList.length;tabList=tabList.filter((tab=>!removedTabIds.includes(tab.tabId)));const removedCount=preRemovalTabCount-tabList.length;var tabIds;return removedCount>0&&(tabIds=removedTabIds,sendMessageToAllTabs({type:MessageType.TAB_REMOVED,tabIds:tabIds})),0==tabList.length&&(initList=[],isFirstTabCreated=!1),removedCount}function checkTabDuplicate(tab){if(!tab)return;const onNotDuplicate=(tab,tabListIndex)=>{-1==tabListIndex?addToList(tab):updateList({arrIndex:tabListIndex,index:tab.index,list:"tabList",pinned:tab.pinned,status:tab.status,title:tab.title,update:"url",newValue:tab.url,updateActivated:tab.active}),state.enabled||markDuplicateTabs(),onCountChangeListener&&onCountChangeListener(tabList.length)},tabListIndex=tabList.findIndex((t=>t.tabId==tab.id));if(!tab.url||!state.enabled||ListControl.isAllowed(tab.url))return onNotDuplicate(tab,tabListIndex);let urlListIndex=function(searchObj){if(Utils.hasDedupParam(searchObj.url))return-1;const{ignoreHash:ignoreHash,ignoreQuery:ignoreQuery}=AumControl.getIgnoreForUrl(searchObj.url);if(searchObj.url=Utils.cleanUrl(searchObj.url,{deDuplicate:!1,ignoreHash:ignoreHash,ignoreQuery:ignoreQuery}),ListControl.isDomainBlocklisted(searchObj.url)){const domain=Utils.getDomainFromUrl(searchObj.url),tabIndexIfDomainAlreadyOpen=tabList.findIndex((tab=>tab.domain===domain&&(!Settings.allowDuplicatesAcrossWindows||tab.windowId===searchObj.windowId)));return-2-tabIndexIfDomainAlreadyOpen}return tabList.findIndex((tab=>{if(Settings.allowDuplicatesAcrossWindows&&tab.windowId!==searchObj.windowId)return!1;return Utils.cleanUrl(tab.url,{deDuplicate:!1,ignoreHash:ignoreHash,ignoreQuery:ignoreQuery})===searchObj.url}))}({windowId:tab.windowId,url:tab.url}),isBlocklistedDomainMatch=!1;if(urlListIndex<-1&&(urlListIndex=-2-urlListIndex,isBlocklistedDomainMatch=!0),-1==urlListIndex||tabList[urlListIndex].tabId==tab.id)return onNotDuplicate(tab,tabListIndex);chrome.tabs.get(tabList[urlListIndex].tabId,(originalTab=>{if(chrome.runtime.lastError||!originalTab)return tabList.splice(urlListIndex,1),onNotDuplicate(tab,tabListIndex);closeAndSwitch({originalTab:originalTab,duplicateTab:tab,isBlocklistedDomainMatch:isBlocklistedDomainMatch}),onCountChangeListener&&onCountChangeListener(tabList.length)}))}function closeAndSwitch(switchObj){!async function(url){if(!url)return;const lst=await localSt.get({closedDuplicates:DefaultSettings.CLOSED_DUPLICATES}),duplicateURL=Suspender.cleanSuspended(url);lst.closedDuplicates.length>0&&duplicateURL===lst.closedDuplicates[lst.closedDuplicates.length-1].url&&lst.closedDuplicates[lst.closedDuplicates.length-1].timestamp-Date.now()<=1e3||(lst.closedDuplicates.push({url:duplicateURL,timestamp:Date.now()}),localSt.set({closedDuplicates:lst.closedDuplicates}))}(switchObj.originalTab.url),chrome.windows.get(switchObj.duplicateTab.windowId,{populate:!0},(duplicateWindow=>{let closeDuplicateTab=!1,deleteLater=!1,forceShowDuplicateClosedNotification=!1;const redirectionObject={wasRedirected:!1,previousUrl:null};if(!switchObj.fromContentScript){const duplicateTab=tabList.find((tab=>tab.tabId===switchObj.duplicateTab.id));duplicateTab&&(redirectionObject.previousUrl=duplicateTab.previousUrl,redirectionObject.wasRedirected=1==duplicateTab.redirected&&!!redirectionObject.previousUrl&&redirectionObject.previousUrl!=Urls.CHROME_NEW_TAB),switchObj.duplicateTab.pinned||switchObj.duplicateTab.active&&duplicateTab&&duplicateTab.url!==Urls.CHROME_NEW_TAB?chrome.tabs.update(switchObj.duplicateTab.id,{url:duplicateTab.url}):(duplicateWindow.tabs.length>1&&Settings.moveOriginalTab===TabMoveTypes.TO_DUPLICATE_POSITION?goBackAndRemove(switchObj.duplicateTab.id,redirectionObject):deleteLater=!0,closeDuplicateTab=!0)}const makeActive=(!switchObj.fromContentScript||!switchObj.ctrlKey&&!switchObj.shiftKey)&&switchObj.duplicateTab.active;if(switchObj.fromContentScript&&switchObj.shiftKey)chrome.windows.get(switchObj.duplicateTab.windowId,(oldWindow=>chrome.windows.create({tabId:switchObj.originalTab.id,focused:!0,state:oldWindow.state||"normal"})));else if(Settings.moveOriginalTab===TabMoveTypes.DONT_MOVE)makeActive||(forceShowDuplicateClosedNotification=!0),deleteLater&&goBackAndRemove(switchObj.duplicateTab.id,redirectionObject);else if(switchObj.originalTab.pinned)deleteLater&&goBackAndRemove(switchObj.duplicateTab.id,redirectionObject);else if(Settings.moveOriginalTab===TabMoveTypes.TO_WINDOW_END)chrome.tabs.move(switchObj.originalTab.id,{index:-1},(()=>deleteLater&&goBackAndRemove(switchObj.duplicateTab.id,redirectionObject)));else{let newPosition=switchObj.duplicateTab.index+(switchObj.originalTab.index<switchObj.duplicateTab.index?0:1)+(closeDuplicateTab?-1:0);newPosition=newPosition<0?0:newPosition,chrome.tabs.move(switchObj.originalTab.id,{index:newPosition,windowId:switchObj.duplicateTab.windowId},(()=>deleteLater&&goBackAndRemove(switchObj.duplicateTab.id,redirectionObject)))}{const moveToWindowId=Settings.moveOriginalTab===TabMoveTypes.DONT_MOVE||switchObj.originalTab.pinned?switchObj.originalTab.windowId:switchObj.duplicateTab.windowId;switchToTab({originalTab:switchObj.originalTab,makeActive:makeActive,moveToWindowId:moveToWindowId,isBlockListedDomainMatch:switchObj.isBlocklistedDomainMatch,duplicateTabId:switchObj.duplicateTab.id,redirectionObject:redirectionObject})}if(switchObj.isBlocklistedDomainMatch&&chrome.tabs.update(switchObj.originalTab.id,{url:Suspender.cleanSuspended(switchObj.duplicateTab.url)}),forceShowDuplicateClosedNotification||!makeActive){const notification=NotificationManager.create(NotificationConstants.Notifications.DUPLICATE_CLOSED);notification.contextMessage=Suspender.cleanSuspended(switchObj.originalTab.url),notification.force=forceShowDuplicateClosedNotification,notification.data={originalTabId:switchObj.originalTab.id,duplicate:{url:switchObj.originalTab.url,active:switchObj.duplicateTab.active,windowId:switchObj.duplicateTab.windowId,index:switchObj.duplicateTab.index+(switchObj.fromContentScript&&!switchObj.shiftKey?1:0)}},NotificationManager.showNotification(notification)}}))}function switchToTab(switchObj){const doUnsuspend=!switchObj.isBlockListedDomainMatch&&Suspender.isSuspended(switchObj.originalTab.url),onAfterUpdate=updatedTab=>{Settings.refreshOriginal&&!doUnsuspend&&chrome.tabs.reload(updatedTab.id,{bypassCache:!0}),switchObj.makeActive&&chrome.windows.update(switchObj.moveToWindowId,{focused:!0},(()=>Settings.closeDuplicateOriginator&&!!switchObj.duplicateTabId&&goBackAndRemove(switchObj.duplicateTabId,switchObj.redirectionObject)))};if(switchObj.originalTab.active!=switchObj.makeActive||doUnsuspend){const originalTabOptions={active:switchObj.makeActive};chrome.tabs.update(switchObj.originalTab.id,originalTabOptions,(updatedTab=>{doUnsuspend?setSuspendTab(updatedTab.id,!1).then((()=>onAfterUpdate(updatedTab))):onAfterUpdate(updatedTab)}))}else onAfterUpdate(switchObj.originalTab)}function goBackAndRemove(tabId,redirectionObject,callback){redirectionObject.wasRedirected&&!redirectionObject.previousUrl||(redirectionObject.wasRedirected?chrome.tabs.update(tabId,{url:redirectionObject.previousUrl},(tab=>watchingTabsForRemovalUponReady.push(tab.id))):chrome.tabs.remove(tabId,(()=>{chrome.runtime.lastError&&console.warn(chrome.runtime.lastError),callback&&callback()})))}function markDuplicateTabs(){tabList=tabList.map((t=>(delete t.isDuplicate,delete t.originalTabId,t)));for(let i=0,l=tabList.length;i<l;i++){if(ListControl.isAllowed(tabList[i].url))continue;if(tabList[i].isDuplicate||tabList[i].isOriginal)continue;const otherDuplicates=tabList.filter((t=>!t.pinned&&t.tabId!==tabList[i].tabId&&isDuplicate(t,tabList[i])));if(0==otherDuplicates.length)continue;otherDuplicates.push(tabList[i]);let originalTabId=Number.MAX_SAFE_INTEGER;otherDuplicates.forEach((t=>{t.tabId<originalTabId&&(originalTabId=t.tabId)}));const originalTabIndex=tabList.findIndex((tl=>tl.tabId==originalTabId));originalTabIndex>-1&&(tabList[originalTabIndex].isOriginal=!0),otherDuplicates.forEach((t=>{if(t.tabId==originalTabId)return;const index=tabList.findIndex((tl=>tl.tabId==t.tabId));index>-1&&(tabList[index].isDuplicate=!0,tabList[index].originalTabId=originalTabId)}))}tabList.forEach((tl=>{delete tl.isOriginal}));const previousDuplicateCount=duplicateCount;return duplicateCount=tabList.filter((t=>t.isDuplicate)).length,0==duplicateCount&&previousDuplicateCount>0&&NotificationManager.clearNotification(NotificationConstants.Notifications.DUPLICATES_FOUND),duplicateCount}function isDuplicate(testTab,baseTab){if(Settings.allowDuplicatesAcrossWindows&&testTab.windowId!=baseTab.windowId)return!1;if(ListControl.isDomainBlocklisted(testTab.url)){if(Utils.getDomainFromUrl(testTab.url)==Utils.getDomainFromUrl(baseTab.url))return!0}const{ignoreHash:testIgnoreHash,ignoreQuery:testIgnoreQuery}=AumControl.getIgnoreForUrl(testTab.url),{ignoreHash:baseIgnoreHash,ignoreQuery:baseIgnoreQuery}=AumControl.getIgnoreForUrl(baseTab.url);return Utils.cleanUrl(testTab.url,{ignoreHash:testIgnoreHash,ignoreQuery:testIgnoreQuery})==Utils.cleanUrl(baseTab.url,{ignoreHash:baseIgnoreHash,ignoreQuery:baseIgnoreQuery})}let TabPosition;function moveTabPositionInWindow(tabId,where=TabPosition.LAST){const tabPosition=where===TabPosition.FIRST?0:-1;tabId?chrome.tabs.get(tabId,(tab=>!chrome.runtime.lastError&&chrome.tabs.move(tab.id,{index:tabPosition}))):chrome.tabs.query({currentWindow:!0,active:!0,windowType:"normal"},(tabs=>!chrome.runtime.lastError&&tabs&&tabs[0]&&chrome.tabs.move(tabs[0].id,{index:tabPosition})))}async function makeDuplicateTab(tab){return state.enabled?(await new Promise((resolve=>{chrome.tabs.create({url:Utils.addDedupToURL(tab.url),index:tab.index+1,windowId:tab.windowId},resolve)})),!chrome.runtime.lastError):(await new Promise((resolve=>chrome.tabs.duplicate(tab.id,resolve))),!chrome.runtime.lastError)}function sendMessageToAllTabs(message){chrome.tabs.query({},(tabs=>tabs.forEach((tab=>chrome.tabs.sendMessage(tab.id,{type:message.type,windowId:tab.windowId,content:message})))))}async function setSuspendTab(tabId,suspend,force=!0){if(null===await Suspender.sendMessage({action:suspend?TgsActions.SUSPEND:TgsActions.UNSUSPEND,tabId:tabId}))return!0;if(suspend||!force)return!1;const tab=await new Promise((resolve=>chrome.tabs.get(tabId,resolve)));return chrome.runtime.lastError||!tab?(console.warn("Error unsuspending tab: no tab id, or ",chrome.runtime.lastError),!1):(await new Promise((resolve=>chrome.tabs.update(tabId,{url:Suspender.cleanSuspended(tab.url)},resolve))),!chrome.runtime.lastError)}return function(TabPosition){TabPosition.FIRST="first",TabPosition.LAST="last"}(TabPosition||(TabPosition={})),{init:function(){chrome.windows.getAll({populate:!0},(windows=>{windows.forEach((eachWindow=>eachWindow.tabs.forEach((tab=>addToList(tab,INIT))))),onCountChangeListener&&onCountChangeListener(initList.length)}))},onInstallOrUpdate:function(){onFirstTabCreated()},onTabCreated:function(){isFirstTabCreated||onFirstTabCreated()},onTabUpdated:function(tabId,changeInfo,tab){if(tab.incognito)return;if(removeWatchedTabs(tabId,changeInfo))return;if(!isFirstTabCreated||0===tabList.length)return onFirstTabCreated((()=>onCountChangeListener&&onCountChangeListener(tabList.length)));const initListIndex=initList.findIndex((tab=>tab.tabId===tabId));if(initListIndex>-1&&"complete"!==initList[initListIndex].status)return changeInfo.hasOwnProperty("url")&&updateList({list:INIT,arrIndex:initListIndex,update:"url",newValue:tab.url,index:tab.index,updateActivated:tab.active}),changeInfo.hasOwnProperty("status")&&updateList({list:INIT,arrIndex:initListIndex,update:"status",newValue:changeInfo.status,index:tab.index,updateActivated:tab.active}),changeInfo.hasOwnProperty("pinned")&&updateList({list:INIT,arrIndex:initListIndex,update:"pinned",newValue:changeInfo.pinned,index:tab.index,updateActivated:tab.active}),void(changeInfo.hasOwnProperty("title")&&updateList({list:INIT,arrIndex:initListIndex,update:"title",newValue:changeInfo.title,index:tab.index,updateActivated:tab.active}));const changedKeys=Object.keys(changeInfo);if(1==changedKeys.length&&"discarded"==changedKeys[0])return;const tabListIndex=tabList.findIndex((tab=>tab.tabId===tabId));if(!changedKeys.includes("url")){if(-1==tabListIndex)return;const changeObject={arrIndex:tabListIndex,index:tab.index,updateActivated:tab.active};let saveChange=!1;return changedKeys.includes("title")&&(saveChange=!0,changeObject.title=changeInfo.title,changeObject.update="title",changeObject.newValue=changeInfo.title),changedKeys.includes("pinned")&&(saveChange=!0,changeObject.pinned=tab.pinned,changeObject.update||(changeObject.update="pinned",changeObject.newValue=tab.pinned)),changedKeys.includes("status")&&(saveChange=!0,changeObject.status=tab.status,changeObject.update||(changeObject.update="status",changeObject.newValue=tab.status)),void(saveChange&&updateList(changeObject))}changeInfo.url!==tab.url&&console.warn("URL MISMATCH",changeInfo.url,tab.url),checkTabDuplicate(tab)},onTabReplaced:function(addedTabId,removedTabId){if(removeWatchedTabs(removedTabId,{}))return;if(!isFirstTabCreated)return onFirstTabCreated((()=>onCountChangeListener&&onCountChangeListener(tabList.length)));const removedTabListIndex=tabList.findIndex((tab=>tab.tabId===removedTabId));if(removedTabListIndex>-1)return chrome.tabs.get(addedTabId,(addedTab=>updateList({arrIndex:removedTabListIndex,update:"tabId",newValue:addedTabId,index:addedTab.index,updateActivated:addedTab.active,status:addedTab.status})));chrome.tabs.get(addedTabId,(tab=>{checkTabDuplicate(tab)}))},onTabRemoved:function(tabId,removeInfo){if(!isFirstTabCreated)return onFirstTabCreated((()=>onCountChangeListener&&onCountChangeListener(tabList.length)));const removedTab=tabList.find((t=>t.tabId==tabId)),removedTabsCount=removeFromListByIds([tabId]);if(onCountChangeListener&&removedTabsCount>0&&onCountChangeListener(tabList.length),removedTab){const removedTabIndex=removedTab.index;tabList=tabList.map((t=>(t.windowId==removeInfo.windowId&&t.index>removedTabIndex&&t.tabId!==tabId&&(t.index-=1),t)))}duplicateCount>0&&(clearTimeout(duplicateTabRemovedCheckTimeout),duplicateTabRemovedCheckTimeout=setTimeout(markDuplicateTabs,500)),console.debug("Tab: "+tabId+" Removed. List size: "+tabList.length)},onWindowRemoved:function(windowId){if(!isFirstTabCreated)return onFirstTabCreated((()=>onCountChangeListener&&onCountChangeListener(tabList.length)));const removedTabsCount=removeFromListByIds(tabList.filter((tab=>tab.windowId==windowId)).map((tab=>tab.tabId)));onCountChangeListener&&removedTabsCount>0&&onCountChangeListener(tabList.length),console.debug(`${removedTabsCount} tabs for window ${windowId} removed in onWindowRemoved. List size: ${tabList.length}`)},onTabDetached:function(tabId){if(!isFirstTabCreated)return onFirstTabCreated((()=>onCountChangeListener&&onCountChangeListener(tabList.length)));const removedTabsCount=removeFromListByIds([tabId]);onCountChangeListener&&removedTabsCount>0&&onCountChangeListener(tabList.length),console.debug("Tab: "+tabId+" removed in onDetached. List size: "+tabList.length)},onTabAttached:function(tabId,attachInfo){if(!isFirstTabCreated)return onFirstTabCreated((()=>onCountChangeListener&&onCountChangeListener(tabList.length)));chrome.tabs.get(tabId,(tab=>{tab.incognito||(addToList(tab),onCountChangeListener&&onCountChangeListener(tabList.length),console.debug("Tab: "+tabId+" added in onAttached;  List size: "+tabList.length),tabList=tabList.map((t=>(t.windowId==attachInfo.newWindowId&&t.index>=attachInfo.newPosition&&t.tabId!==tabId&&(t.index+=1),t))))}))},onTabActivated:function(activeInfo){const tabIndex=tabList.findIndex((t=>t.tabId==activeInfo.tabId));tabIndex>-1&&(tabList[tabIndex].lastActivated=Date.now())},onTabMoved:function(tabId,moveInfo){const tabIndex=tabList.findIndex((t=>t.tabId==tabId));tabIndex>-1&&(tabList[tabIndex].windowId=moveInfo.windowId,tabList[tabIndex].index=moveInfo.toIndex),tabList=tabList.map((t=>(t.windowId!=moveInfo.windowId||t.tabId==tabId||(t.index>moveInfo.fromIndex&&(t.index-=1),t.index>=moveInfo.toIndex&&(t.index+=1)),t)))},onRedirect:function(details){if("main_frame"!==details.type||301==details.statusCode)return;const tabListIndex=tabList.findIndex((tab=>tab.tabId===details.tabId));tabListIndex>-1&&(tabList[tabListIndex].redirecting=!0,tabList[tabListIndex].redirectUrl=details.redirectUrl)},closeAndSwitch:closeAndSwitch,switchToTab:switchToTab,getLostTabs:function getLostTabs(callback){if(0==tabList.length)return void getAllTabs((()=>getLostTabs(callback)));const lostTabs=[];for(let i=initList.length-1;i>=0;i--)tabList.find((tab=>tab.tabId===initList[i].tabId))||(lostTabs.push(initList[i]),initList.splice(i,1));callback&&callback(lostTabs)},isDuplicate:isDuplicate,markDuplicateTabs:markDuplicateTabs,getDuplicateTabsList:async function(){if(await cleanTabList(),0==markDuplicateTabs())return[];const justDuplicates=tabList.filter((tab=>tab.isDuplicate)),duplicates=[];return justDuplicates.forEach((tab=>{const originalTab=tabList.find((t=>t.tabId==tab.originalTabId));originalTab&&(duplicates.push(tab),duplicates.find((t=>t.tabId==originalTab.tabId))||duplicates.push(originalTab))})),duplicates},cleanTabList:cleanTabList,removeDuplicateTabs:async function(){if(await cleanTabList(),duplicateCount=markDuplicateTabs(),0==duplicateCount)return duplicateCount;const duplicatesRemovedCount=duplicateCount;for(let i=tabList.length-1;i>=0;i--){const tab=tabList[i];tab.isDuplicate&&(goBackAndRemove(tab.tabId,{previousUrl:tab.previousUrl,wasRedirected:1==tab.redirected&&!!tab.previousUrl&&tab.previousUrl!=Urls.CHROME_NEW_TAB}),tabList.splice(i,1))}return onCountChangeListener&&onCountChangeListener(tabList.length),duplicateCount=0,duplicatesRemovedCount},keepDuplicateTabs:function(){},moveToLast:tabId=>moveTabPositionInWindow(tabId,TabPosition.LAST),moveToFirst:tabId=>moveTabPositionInWindow(tabId,TabPosition.FIRST),duplicateThisTab:async function(tabId){if(tabId===chrome.tabs.TAB_ID_NONE)return console.warn("Invalid tab id",tabId),!1;if(!tabId){const activeTab=await Utils.getCurrentTab();return!!activeTab&&await makeDuplicateTab(activeTab)}const tab=await new Promise((resolve=>chrome.tabs.get(tabId,resolve)));return chrome.runtime.lastError||!tab?(console.warn("Couldn't find tab to duplicate",chrome.runtime.lastError),!1):await makeDuplicateTab(tab)},sendMessageToAllTabs:sendMessageToAllTabs,setCountChangeListener:function(newListener){newListener&&(onCountChangeListener=newListener)},setSuspendTab:setSuspendTab,toggleSuspendTab:async function(tab){let currentTab;if(tab)currentTab=Object.assign({},tab);else{const activeTab=await Utils.getCurrentTab();if(!activeTab)return;currentTab=Object.assign({},activeTab)}const isSuspended=Suspender.isSuspended(currentTab.url);isSuspended||Suspender.isSuspendableUrl(currentTab.url)?setSuspendTab(currentTab.id,!isSuspended):console.log("Internal chrome URL, can't be suspended",currentTab.url)},togglePinTab:async function(tab){let currentTab;if(tab)currentTab=Object.assign({},tab);else{const activeTab=await Utils.getCurrentTab();if(!activeTab)return;currentTab=Object.assign({},activeTab)}await new Promise((resolve=>chrome.tabs.update(currentTab.id,{pinned:!currentTab.pinned},resolve)))},closeOtherTabsForSameDomain:async function(tab){if(!await License.isSupporter())return;const getTabsForDomain=await async function(tab){let currentTab;if(tab)currentTab=tab;else{const activeTab=await Utils.getCurrentTab();if(!activeTab)return null;currentTab=activeTab}const currentDomain=Utils.getDomainFromUrl(currentTab.url),tabs=await new Promise((resolve=>chrome.tabs.query({windowType:"normal"},resolve)));return console.debug("all tabs",tabs.length,chrome.runtime.lastError),chrome.runtime.lastError?(console.warn("Error fetching tabs",chrome.runtime.lastError.message),null):{currentTab:currentTab,allTabs:tabs.filter((t=>Utils.getDomainFromUrl(t.url)==currentDomain))}}(tab);if(!getTabsForDomain||1===getTabsForDomain.allTabs.length)return;const tabIdsToClose=getTabsForDomain.allTabs.filter((t=>t.id!=getTabsForDomain.currentTab.id)).map((t=>t.id));await new Promise((resolve=>chrome.tabs.remove(tabIdsToClose,resolve)));const domain=Utils.getDomainFromUrl(getTabsForDomain.currentTab.url),notification=NotificationManager.create(NotificationConstants.Notifications.DOMAIN_DUPLICATES_CLOSED);notification.message=chrome.i18n.getMessage("notification_message_domain_duplicates_closed",[tabIdsToClose.length+"",domain]),NotificationManager.showNotification(notification)},get isFirstTabCreated(){return isFirstTabCreated},get tabList(){return tabList},get tabCount(){return(tabList.length>0?tabList:initList).filter((t=>!INTERNAL_URL_REGEX.test(t.url))).length},get hasDuplicates(){return duplicateCount>0},get duplicateCount(){return duplicateCount},addToInitList:tab=>addToList(tab,INIT)}}();